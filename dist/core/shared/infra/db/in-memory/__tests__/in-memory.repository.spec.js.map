{"version":3,"sources":["../../../../../../../src/core/shared/infra/db/in-memory/__tests__/in-memory.repository.spec.ts"],"sourcesContent":["import { Entity } from \"../../../../domain/entity\";\nimport { Uuid } from \"../../../../domain/value-objects/uuid.vo\";\nimport { InMemoryRepository } from \"../in-memory.repository\";\n\ntype StubEntityConstructorProps = {\n  entity_id?: Uuid;\n  name: string;\n  price: number;\n};\n\nclass StubEntity extends Entity {\n  entity_id: Uuid;\n  name: string;\n  price: number;\n\n  constructor(props?: StubEntityConstructorProps) {\n    super();\n    this.entity_id = props?.entity_id ?? new Uuid();\n    this.name = props?.name ?? 'Stub Entity';\n    this.price = props?.price ?? 0;\n  }\n\n  toJSON() {\n    return {\n      entity_id: this.entity_id,\n      name: this.name,\n      price: this.price\n    }\n  }\n}\n\nclass StubInMemoryRepository extends InMemoryRepository<StubEntity, Uuid> {\n  getEntity(): new (...args: any[]) => StubEntity {\n    return StubEntity;\n  }\n}\ndescribe('InMemoryRepository unit tests', () => {\n  let repo: StubInMemoryRepository;\n  beforeEach(() => {\n     repo = new StubInMemoryRepository();\n  });\n  \n  test('should insert entity', async () => {\n    const entity = new StubEntity({\n      entity_id: new Uuid(),\n      name: 'Stub Entity',\n      price: 100,\n    });\n\n    await repo.insert(entity);\n\n    expect(repo.items.length).toBe(1);\n    expect(repo.items[0]).toBe(entity);\n  });\n\n  test('should bulk insert entities', async () => {\n    const entities = [\n      new StubEntity({\n        entity_id: new Uuid(),\n        name: 'Stub Entity 1',\n        price: 100,\n      }),\n      new StubEntity({\n        entity_id: new Uuid(),\n        name: 'Stub Entity 2',\n        price: 200,\n      }),\n    ];\n\n    await repo.bulkInsert(entities);\n\n    expect(repo.items.length).toBe(2);\n    expect(repo.items[0]).toBe(entities[0]);\n    expect(repo.items[1]).toBe(entities[1]);\n  });\n});"],"names":["StubEntity","Entity","toJSON","entity_id","name","price","constructor","props","Uuid","StubInMemoryRepository","InMemoryRepository","getEntity","describe","repo","beforeEach","test","entity","insert","expect","items","length","toBe","entities","bulkInsert"],"mappings":";;;;wBAAuB;wBACF;oCACc;AAQnC,IAAA,AAAMA,aAAN,MAAMA,mBAAmBC,cAAM;IAY7BC,SAAS;QACP,OAAO;YACLC,WAAW,IAAI,CAACA,SAAS;YACzBC,MAAM,IAAI,CAACA,IAAI;YACfC,OAAO,IAAI,CAACA,KAAK;QACnB;IACF;IAbAC,YAAYC,KAAkC,CAAE;QAC9C,KAAK;QACL,IAAI,CAACJ,SAAS,GAAGI,OAAOJ,aAAa,IAAIK,YAAI;QAC7C,IAAI,CAACJ,IAAI,GAAGG,OAAOH,QAAQ;QAC3B,IAAI,CAACC,KAAK,GAAGE,OAAOF,SAAS;IAC/B;AASF;AAEA,IAAA,AAAMI,yBAAN,MAAMA,+BAA+BC,sCAAkB;IACrDC,YAAgD;QAC9C,OAAOX;IACT;AACF;AACAY,SAAS,iCAAiC;IACxC,IAAIC;IACJC,WAAW;QACRD,OAAO,IAAIJ;IACd;IAEAM,KAAK,wBAAwB;QAC3B,MAAMC,SAAS,IAAIhB,WAAW;YAC5BG,WAAW,IAAIK,YAAI;YACnBJ,MAAM;YACNC,OAAO;QACT;QAEA,MAAMQ,KAAKI,MAAM,CAACD;QAElBE,OAAOL,KAAKM,KAAK,CAACC,MAAM,EAAEC,IAAI,CAAC;QAC/BH,OAAOL,KAAKM,KAAK,CAAC,EAAE,EAAEE,IAAI,CAACL;IAC7B;IAEAD,KAAK,+BAA+B;QAClC,MAAMO,WAAW;YACf,IAAItB,WAAW;gBACbG,WAAW,IAAIK,YAAI;gBACnBJ,MAAM;gBACNC,OAAO;YACT;YACA,IAAIL,WAAW;gBACbG,WAAW,IAAIK,YAAI;gBACnBJ,MAAM;gBACNC,OAAO;YACT;SACD;QAED,MAAMQ,KAAKU,UAAU,CAACD;QAEtBJ,OAAOL,KAAKM,KAAK,CAACC,MAAM,EAAEC,IAAI,CAAC;QAC/BH,OAAOL,KAAKM,KAAK,CAAC,EAAE,EAAEE,IAAI,CAACC,QAAQ,CAAC,EAAE;QACtCJ,OAAOL,KAAKM,KAAK,CAAC,EAAE,EAAEE,IAAI,CAACC,QAAQ,CAAC,EAAE;IACxC;AACF"}