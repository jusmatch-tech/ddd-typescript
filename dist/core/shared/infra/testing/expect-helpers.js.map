{"version":3,"sources":["../../../../../src/core/shared/infra/testing/expect-helpers.ts"],"sourcesContent":["//import { ClassValidatorFields } from \"../../domain/validators/class-validator-fields\";\n//import { EntityValidationError } from \"../../domain/validators/validation.error\";\n//import { FieldsErrors } from \"../../domain/validators/validator-fields-interface\";\nimport { Notification } from '../../domain/validators/notification';\n\n// type Expected =\n//   | {\n//       validator: ClassValidatorFields<any>;\n//       data: any;\n//     }\n//   | (() => any);\n\nexpect.extend({\n  notificationContainsErrorMessages(\n    expected: Notification,\n    received: Array<string | { [key: string]: string[] }>,\n  ) {\n    const every = received.every((error) => {\n      if (typeof error === 'string') {\n        return expected.errors.has(error);\n      } else {\n        return Object.entries(error).every(([field, messages]) => {\n          const fieldMessages = expected.errors.get(field) as string[];\n\n          return (\n            fieldMessages &&\n            fieldMessages.length &&\n            fieldMessages.every((message) => messages.includes(message))\n          );\n        });\n      }\n    });\n    return every\n      ? { pass: true, message: () => '' }\n      : {\n          pass: false,\n          message: () =>\n            `The validation errors not contains ${JSON.stringify(\n              received,\n            )}. Current: ${JSON.stringify(expected.toJSON())}`,\n        };\n  },\n  // containsErrorMessages(expected: Expected, received: FieldsErrors) {\n  //   if (typeof expected === \"function\") {\n  //     try {\n  //       expected();\n  //       return isValid();\n  //     } catch (e) {\n  //       const error = e as EntityValidationError;\n  //       return assertContainsErrorsMessages(error.error, received);\n  //     }\n  //   } else {\n  //     const { validator, data } = expected;\n  //     const validated = validator.validate(data);\n\n  //     if (validated) {\n  //       return isValid();\n  //     }\n\n  //     return assertContainsErrorsMessages(validator.errors, received);\n  //   }\n  // },\n});\n\n// function assertContainsErrorsMessages(\n//   expected: FieldsErrors,\n//   received: FieldsErrors\n// ) {\n//   const isMatch = expect.objectContaining(received).asymmetricMatch(expected);\n\n//   return isMatch\n//     ? isValid()\n//     : {\n//         pass: false,\n//         message: () =>\n//           `The validation errors not contains ${JSON.stringify(\n//             received\n//           )}. Current: ${JSON.stringify(expected)}`,\n//       };\n// }\n\n// function isValid() {\n//   return { pass: true, message: () => \"\" };\n// }"],"names":["expect","extend","notificationContainsErrorMessages","expected","received","every","error","errors","has","Object","entries","field","messages","fieldMessages","get","length","message","includes","pass","JSON","stringify","toJSON"],"mappings":"AAAA,wFAAwF;AACxF,mFAAmF;AACnF,oFAAoF;;;;;AAGpF,kBAAkB;AAClB,QAAQ;AACR,8CAA8C;AAC9C,mBAAmB;AACnB,QAAQ;AACR,mBAAmB;AAEnBA,OAAOC,MAAM,CAAC;IACZC,mCACEC,QAAsB,EACtBC,QAAqD;QAErD,MAAMC,QAAQD,SAASC,KAAK,CAAC,CAACC;YAC5B,IAAI,OAAOA,UAAU,UAAU;gBAC7B,OAAOH,SAASI,MAAM,CAACC,GAAG,CAACF;YAC7B,OAAO;gBACL,OAAOG,OAAOC,OAAO,CAACJ,OAAOD,KAAK,CAAC,CAAC,CAACM,OAAOC,SAAS;oBACnD,MAAMC,gBAAgBV,SAASI,MAAM,CAACO,GAAG,CAACH;oBAE1C,OACEE,iBACAA,cAAcE,MAAM,IACpBF,cAAcR,KAAK,CAAC,CAACW,UAAYJ,SAASK,QAAQ,CAACD;gBAEvD;YACF;QACF;QACA,OAAOX,QACH;YAAEa,MAAM;YAAMF,SAAS,IAAM;QAAG,IAChC;YACEE,MAAM;YACNF,SAAS,IACP,CAAC,mCAAmC,EAAEG,KAAKC,SAAS,CAClDhB,UACA,WAAW,EAAEe,KAAKC,SAAS,CAACjB,SAASkB,MAAM,IAAI,CAAC;QACtD;IACN;AAqBF,IAEA,yCAAyC;CACzC,4BAA4B;CAC5B,2BAA2B;CAC3B,MAAM;CACN,iFAAiF;CAEjF,mBAAmB;CACnB,kBAAkB;CAClB,UAAU;CACV,uBAAuB;CACvB,yBAAyB;CACzB,kEAAkE;CAClE,uBAAuB;CACvB,uDAAuD;CACvD,WAAW;CACX,IAAI;CAEJ,uBAAuB;CACvB,8CAA8C;CAC9C,IAAI"}