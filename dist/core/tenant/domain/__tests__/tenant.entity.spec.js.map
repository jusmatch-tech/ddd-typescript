{"version":3,"sources":["../../../../../src/core/tenant/domain/__tests__/tenant.entity.spec.ts"],"sourcesContent":["import { Uuid } from \"../../../shared/domain/value-objects/uuid.vo\";\nimport { Tenant } from \"../tenant.entity\";\n\ndescribe('Tenant Unit Test', () => {\n  let validateSpy: any;\n  //beforeEach(() => {\n  //  validateSpy = jest.spyOn(Tenant, 'validate');\n  //});\n\n\n  describe('Constructor', () => {\n\n    test('Should create a tenant with default value', () => {\n      const tenant = new Tenant({\n        name: 'test'\n      });\n      expect(tenant.tenant_id).toBeInstanceOf(Uuid)\n      expect(tenant.name).toBe('test');\n      expect(tenant.description).toBeNull();\n      expect(tenant.is_active).toBeTruthy();\n      expect(tenant.created_at).toBeInstanceOf(Date);\n    });\n    test('Should create a tenant with all values', () => {\n\n      const created_at = new Date();\n      const updated_at = new Date();\n      const tenant = new Tenant({\n        name: 'test',\n        description: 'test',\n        is_active: false,\n        created_at,\n        updated_at\n      });\n      expect(tenant.tenant_id).toBeInstanceOf(Uuid)\n      expect(tenant.name).toBe('test');\n      expect(tenant.description).toBe('test');\n      expect(tenant.is_active).toBeFalsy();\n      expect(tenant.created_at).toBe(created_at);\n      expect(tenant.updated_at).toBe(updated_at);\n    });\n\n    test('Should create a tenant with name and description', () => {\n      const tenant = new Tenant({\n        name: 'test',\n        description: 'test'\n      });\n      expect(tenant.tenant_id).toBeInstanceOf(Uuid)\n      expect(tenant.name).toBe('test');\n      expect(tenant.description).toBe('test');\n      expect(tenant.is_active).toBeTruthy();\n      expect(tenant.created_at).toBeInstanceOf(Date);\n    });  \n  });\n\n  describe('Create', () => {\n    test('Should create a tenant with default value', () => {\n      const tenant = Tenant.create({\n        name: 'test'\n      });\n      expect(tenant.tenant_id).toBeInstanceOf(Uuid)\n      expect(tenant.name).toBe('test');\n      expect(tenant.description).toBeNull();\n      expect(tenant.is_active).toBeTruthy();\n      expect(tenant.created_at).toBeInstanceOf(Date);\n      //expect(validateSpy).toHaveBeenCalledTimes(1);\n    });\n\n    test('Should create a tenant with name and description', () => {\n      const tenant = Tenant.create({\n        name: 'test',\n        description: 'test'\n      });\n      expect(tenant.tenant_id).toBeInstanceOf(Uuid)\n      expect(tenant.name).toBe('test');\n      expect(tenant.description).toBe('test');\n      expect(tenant.is_active).toBeTruthy();\n      expect(tenant.created_at).toBeInstanceOf(Date);\n      //expect(validateSpy).toHaveBeenCalledTimes(1);\n    });\n\n    test('Should create a tenant with is_active false', () => {\n      const tenant = Tenant.create({\n        name: 'test',\n        is_active: false\n      });\n      expect(tenant.tenant_id).toBeInstanceOf(Uuid)\n      expect(tenant.name).toBe('test');\n      expect(tenant.description).toBeNull();\n      expect(tenant.is_active).toBeFalsy();\n      expect(tenant.created_at).toBeInstanceOf(Date);\n    });\n  \n  });\n\n  describe('tenant_id field', () => {\n    const arrange = [\n      {tenant_id: null}, \n      {tenant_id: undefined}, \n      {tenant_id: new Uuid()}\n    ];\n    test.each(arrange)('Should create a tenant with tenant_id %p', ({tenant_id}) => {\n      const tenant = new Tenant({\n        name: 'test',\n        tenant_id: tenant_id as any,\n      });\n      expect(tenant.tenant_id).toBeInstanceOf(Uuid);\n      if (tenant_id instanceof Uuid) {\n        expect(tenant.tenant_id).toBe(tenant_id);\n      }\n    });\n  });\n\n  describe('Change Name', () => {\n    test('Should change name', () => {\n      const tenant = Tenant.create({\n        name: 'test'\n      });\n      tenant.changeName('test2');\n      expect(tenant.name).toBe('test2');\n      //expect(validateSpy).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Change Description', () => {\n    test('Should change description', () => {\n      const tenant = Tenant.create({\n        name: 'test'\n      });\n      tenant.changeDescription('test2');\n      expect(tenant.description).toBe('test2');\n      //expect(validateSpy).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Activate', () => {\n    test('Should activate tenant', () => {\n      const tenant = Tenant.create({\n        name: 'test',\n        is_active: false\n      });\n      tenant.activate();\n      expect(tenant.is_active).toBeTruthy();\n      //expect(validateSpy).toHaveBeenCalledTimes(1);\n\n    });\n  });\n\n  describe('Deactivate', () => {\n    test('Should deactivate tenant', () => {\n      const tenant = Tenant.create({\n        name: 'test',\n        is_active: true\n      });\n      tenant.deactivate();\n      expect(tenant.is_active).toBeFalsy();\n      //expect(validateSpy).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('Tenant Validator', () => {\n      describe('Create Command', () => {\n        test('Should validate name', () => {\n          const tenant = Tenant.create({ name: \"t\".repeat(256) });\n          expect(tenant.notification.hasErrors()).toBe(true);\n          expect(tenant.notification).notificationContainsErrorMessages([\n            {\n              name: ['name must be shorter than or equal to 255 characters'],\n            }\n          ]);\n        });\n      });\n      describe('Change Name Command', () => {\n        it ('Should a invalid tenant name property', () => {\n          const tenant = Tenant.create({ name: \"test\" });\n          tenant.changeName(\"t\".repeat(256));\n          expect(tenant.notification.hasErrors()).toBe(true);\n          expect(tenant.notification).notificationContainsErrorMessages([\n            {\n              name: ['name must be shorter than or equal to 255 characters'],\n            }\n          ]);\n        });\n      });\n    });\n});\n\n"],"names":["describe","validateSpy","test","tenant","Tenant","name","expect","tenant_id","toBeInstanceOf","Uuid","toBe","description","toBeNull","is_active","toBeTruthy","created_at","Date","updated_at","toBeFalsy","create","arrange","undefined","each","changeName","changeDescription","activate","deactivate","repeat","notification","hasErrors","notificationContainsErrorMessages","it"],"mappings":"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"}