{"version":3,"sources":["../../../../../src/core/tenant/domain/__tests__/tenant-fake.builders.spec.ts"],"sourcesContent":["import { Chance } from 'chance';\nimport { TenantFakeBuilder } from '../tenant-fake.builders';\nimport { Uuid } from '../../../shared/domain/value-objects/uuid.vo';\n\ndescribe('TenantFakerBuilder Unit Tests', () => {\n  describe('tenant_id prop', () => {\n    const faker = TenantFakeBuilder.aTenant();\n\n    test('should throw error when any with methods has called', () => {\n      expect(() => faker.tenant_id).toThrow(\n        new Error(\"Property tenant_id not have a factory, use 'with' methods\"),\n      );\n    });\n\n    test('should be undefined', () => {\n      expect(faker['_tenant_id']).toBeUndefined();\n    });\n\n    test('withTenantId', () => {\n      const tenant_id = new Uuid();\n      const $this = faker.withUuid(tenant_id);\n      expect($this).toBeInstanceOf(TenantFakeBuilder);\n      expect(faker['_tenant_id']).toBe(tenant_id);\n\n      faker.withUuid(() => tenant_id);\n      //@ts-expect-error _tenant_id is a callable\n      expect(faker['_tenant_id']()).toBe(tenant_id);\n\n      expect(faker.tenant_id).toBe(tenant_id);\n    });\n\n    test('should pass index to tenant_id factory', () => {\n      let mockFactory = jest.fn(() => new Uuid());\n      faker.withUuid(mockFactory);\n      faker.build();\n      expect(mockFactory).toHaveBeenCalledTimes(1);\n\n      const tenantId = new Uuid();\n      mockFactory = jest.fn(() => tenantId);\n      const fakerMany = TenantFakeBuilder.theTenants(2);\n      fakerMany.withUuid(mockFactory);\n      fakerMany.build();\n\n      expect(mockFactory).toHaveBeenCalledTimes(2);\n      expect(fakerMany.build()[0].tenant_id).toBe(tenantId);\n      expect(fakerMany.build()[1].tenant_id).toBe(tenantId);\n    });\n  });\n\n  describe('name prop', () => {\n    const faker = TenantFakeBuilder.aTenant();\n    test('should be a function', () => {\n      expect(typeof faker['_name']).toBe('function');\n    });\n\n    test('should call the word method', () => {\n      const chance = Chance();\n      const spyWordMethod = jest.spyOn(chance, 'word');\n      faker['chance'] = chance;\n      faker.build();\n\n      expect(spyWordMethod).toHaveBeenCalled();\n    });\n\n    test('withName', () => {\n      const $this = faker.withName('test name');\n      expect($this).toBeInstanceOf(TenantFakeBuilder);\n      expect(faker['_name']).toBe('test name');\n\n      faker.withName(() => 'test name');\n      //@ts-expect-error name is callable\n      expect(faker['_name']()).toBe('test name');\n\n      expect(faker.name).toBe('test name');\n    });\n\n    test('should pass index to name factory', () => {\n      faker.withName((index) => `test name ${index}`);\n      const tenant = faker.build();\n      expect(tenant.name).toBe(`test name 0`);\n\n      const fakerMany = TenantFakeBuilder.theTenants(2);\n      fakerMany.withName((index) => `test name ${index}`);\n      const tenants = fakerMany.build();\n\n      expect(tenants[0].name).toBe(`test name 0`);\n      expect(tenants[1].name).toBe(`test name 1`);\n    });\n\n    test('invalid too long case', () => {\n      const $this = faker.withInvalidNameTooLong();\n      expect($this).toBeInstanceOf(TenantFakeBuilder);\n      expect(faker['_name'].length).toBe(256);\n\n      const tooLong = 'a'.repeat(256);\n      faker.withInvalidNameTooLong(tooLong);\n      expect(faker['_name'].length).toBe(256);\n      expect(faker['_name']).toBe(tooLong);\n    });\n  });\n\n  describe('description prop', () => {\n    const faker = TenantFakeBuilder.aTenant();\n    test('should be a function', () => {\n      expect(typeof faker['_description']).toBe('function');\n    });\n\n    test('should call the paragraph method', () => {\n      const chance = Chance();\n      const spyParagraphMethod = jest.spyOn(chance, 'paragraph');\n      faker['chance'] = chance;\n      faker.build();\n      expect(spyParagraphMethod).toHaveBeenCalled();\n    });\n\n    test('withDescription', () => {\n      const $this = faker.withDescription('test description');\n      expect($this).toBeInstanceOf(TenantFakeBuilder);\n      expect(faker['_description']).toBe('test description');\n\n      faker.withDescription(() => 'test description');\n      //@ts-expect-error description is callable\n      expect(faker['_description']()).toBe('test description');\n\n      expect(faker.description).toBe('test description');\n    });\n\n    test('should pass index to description factory', () => {\n      faker.withDescription((index) => `test description ${index}`);\n      const tenant = faker.build();\n      expect(tenant.description).toBe(`test description 0`);\n\n      const fakerMany = TenantFakeBuilder.theTenants(2);\n      fakerMany.withDescription((index) => `test description ${index}`);\n      const tenants = fakerMany.build();\n\n      expect(tenants[0].description).toBe(`test description 0`);\n      expect(tenants[1].description).toBe(`test description 1`);\n    });\n  });\n\n  describe('is_active prop', () => {\n    const faker = TenantFakeBuilder.aTenant();\n    test('should be a function', () => {\n      expect(typeof faker['_is_active']).toBe('function');\n    });\n\n    test('activate', () => {\n      const $this = faker.activate();\n      expect($this).toBeInstanceOf(TenantFakeBuilder);\n      expect(faker['_is_active']).toBe(true);\n      expect(faker.is_active).toBe(true);\n    });\n\n    test('deactivate', () => {\n      const $this = faker.deactivate();\n      expect($this).toBeInstanceOf(TenantFakeBuilder);\n      expect(faker['_is_active']).toBe(false);\n      expect(faker.is_active).toBe(false);\n    });\n  });\n\n  describe('created_at prop', () => {\n    const faker = TenantFakeBuilder.aTenant();\n\n    test('should throw error when any with methods has called', () => {\n      const fakerTenant = TenantFakeBuilder.aTenant();\n      expect(() => fakerTenant.created_at).toThrow(\n        new Error(\"Property created_at not have a factory, use 'with' methods\"),\n      );\n    });\n\n    test('should be undefined', () => {\n      expect(faker['_created_at']).toBeUndefined();\n    });\n\n    test('withCreatedAt', () => {\n      const date = new Date();\n      const $this = faker.withCreatedAt(date);\n      expect($this).toBeInstanceOf(TenantFakeBuilder);\n      expect(faker['_created_at']).toBe(date);\n\n      faker.withCreatedAt(() => date);\n      //@ts-expect-error _created_at is a callable\n      expect(faker['_created_at']()).toBe(date);\n      expect(faker.created_at).toBe(date);\n    });\n\n    test('should pass index to created_at factory', () => {\n      const date = new Date();\n      faker.withCreatedAt((index) => new Date(date.getTime() + index + 2));\n      const tenant = faker.build();\n      expect(tenant.created_at.getTime()).toBe(date.getTime() + 2);\n\n      const fakerMany = TenantFakeBuilder.theTenants(2);\n      fakerMany.withCreatedAt((index) => new Date(date.getTime() + index + 2));\n      const tenants = fakerMany.build();\n\n      expect(tenants[0].created_at.getTime()).toBe(date.getTime() + 2);\n      expect(tenants[1].created_at.getTime()).toBe(date.getTime() + 3);\n    });\n  });\n\n  describe('updated_at prop', () => {\n    const faker = TenantFakeBuilder.aTenant();\n\n    test('should throw error when any with methods has called', () => {\n      const fakerTenant = TenantFakeBuilder.aTenant();\n      expect(() => fakerTenant.updated_at).toThrow(\n        new Error(\"Property updated_at not have a factory, use 'with' methods\"),\n      );\n    });\n\n    test('should be undefined', () => {\n      expect(faker['_updated_at']).toBeUndefined();\n    });\n\n    test('withUpdatedAt', () => {\n      const date = new Date();\n      const $this = faker.withUpdatedAt(date);\n      expect($this).toBeInstanceOf(TenantFakeBuilder);\n      expect(faker['_updated_at']).toBe(date);\n\n      faker.withCreatedAt(() => date);\n      //expect(faker['_updated_at']()).toBe(date);\n      expect(faker.updated_at).toBe(date);\n    });\n\n    test('should pass index to updated_at factory', () => {\n      const date = new Date();\n      faker.withUpdatedAt((index) => new Date(date.getTime() + index + 2));\n      const tenant = faker.build();\n      expect(tenant.updated_at.getTime()).toBe(date.getTime() + 2);\n\n      const fakerMany = TenantFakeBuilder.theTenants(2);\n      fakerMany.withUpdatedAt((index) => new Date(date.getTime() + index + 2));\n      const tenants = fakerMany.build();\n\n      expect(tenants[0].updated_at.getTime()).toBe(date.getTime() + 2);\n      expect(tenants[1].updated_at.getTime()).toBe(date.getTime() + 3);\n    });\n  });\n\n  test('should create a tenant', () => {\n    const faker = TenantFakeBuilder.aTenant();\n    let tenant = faker.build();\n\n    expect(tenant.tenant_id).toBeInstanceOf(Uuid);\n    expect(typeof tenant.name === 'string').toBeTruthy();\n    expect(typeof tenant.description === 'string').toBeTruthy();\n    expect(tenant.is_active).toBe(true);\n    expect(tenant.created_at).toBeInstanceOf(Date);\n\n    const created_at = new Date();\n    const updated_at = new Date();\n    const tenant_id = new Uuid();\n    tenant = faker\n      .withUuid(tenant_id)\n      .withName('name test')\n      .withDescription('description test')\n      .deactivate()\n      .withCreatedAt(created_at)\n      .withUpdatedAt(updated_at)\n      .build();\n\n    expect(tenant.tenant_id.id).toBe(tenant_id.id);\n    expect(tenant.name).toBe('name test');\n    expect(tenant.description).toBe('description test');\n    expect(tenant.is_active).toBe(false);\n    expect(tenant.created_at).toBe(created_at);\n  });\n\n  test('should create many tenants', () => {\n    const faker = TenantFakeBuilder.theTenants(2);\n    let tenants = faker.build();\n\n    tenants.forEach((tenant) => {\n      expect(tenant.tenant_id).toBeInstanceOf(Uuid);\n      expect(typeof tenant.name === 'string').toBeTruthy();\n      expect(typeof tenant.description === 'string').toBeTruthy();\n      expect(tenant.is_active).toBe(true);\n      expect(tenant.created_at).toBeInstanceOf(Date);\n      expect(tenant.updated_at).toBeInstanceOf(Date);\n    });\n\n    const created_at = new Date();\n    const updated_at = new Date();\n    const tenant_id = new Uuid();\n    tenants = faker\n      .withUuid(tenant_id)\n      .withName('name test')\n      .withDescription('description test')\n      .deactivate()\n      .withCreatedAt(created_at)\n      .withUpdatedAt(updated_at)\n      .build();\n\n    tenants.forEach((tenant) => {\n      expect(tenant.tenant_id.id).toBe(tenant_id.id);\n      expect(tenant.name).toBe('name test');\n      expect(tenant.description).toBe('description test');\n      expect(tenant.is_active).toBe(false);\n      expect(tenant.created_at).toBe(created_at);\n      expect(tenant.updated_at).toBe(updated_at);\n    });\n  });\n});\n"],"names":["describe","faker","TenantFakeBuilder","aTenant","test","expect","tenant_id","toThrow","Error","toBeUndefined","Uuid","$this","withUuid","toBeInstanceOf","toBe","mockFactory","jest","fn","build","toHaveBeenCalledTimes","tenantId","fakerMany","theTenants","chance","Chance","spyWordMethod","spyOn","toHaveBeenCalled","withName","name","index","tenant","tenants","withInvalidNameTooLong","length","tooLong","repeat","spyParagraphMethod","withDescription","description","activate","is_active","deactivate","fakerTenant","created_at","date","Date","withCreatedAt","getTime","updated_at","withUpdatedAt","toBeTruthy","id","forEach"],"mappings":"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"}