{"version":3,"sources":["../../../../../../src/core/tenant/infra/db/in-memory/tenant-in-memory.repository.ts"],"sourcesContent":["import { SortDirection } from \"../../../../shared/domain/repository/search-params\";\nimport { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\nimport { InMemoryRepository, InMemorySearchableRepository } from \"../../../../shared/infra/db/in-memory/in-memory.repository\";\nimport { Tenant } from \"../../../domain/tenant.entity\";\n\nexport class TenantInMemoryRepository extends InMemorySearchableRepository<\n  Tenant, \n  Uuid\n> \n{\n  sortableFields: string[] = ['name', 'created_at', 'updated_at'];\n\n  protected async applyFilter(\n    items: Tenant[], \n    filter: string\n    ): Promise<Tenant[]> {\n      if (!filter) return items;\n\n      return items.filter((i) => {\n        return i.name.toLowerCase().includes(filter.toLowerCase());\n      });\n\n  }\n  getEntity(): new (...args: any[]) => Tenant {\n    return Tenant;\n  }\n\n  protected applySort(\n    items: Tenant[], \n    sort: string | null, \n    sort_dir: SortDirection | null, \n    custom_getter?: (sort: string, item: Tenant) => any\n    ) {\n      return sort\n      ? super.applySort(items, sort, sort_dir)\n      : super.applySort(items, 'created_at', 'desc');\n      \n  }\n}"],"names":["TenantInMemoryRepository","InMemorySearchableRepository","applyFilter","items","filter","i","name","toLowerCase","includes","getEntity","Tenant","applySort","sort","sort_dir","custom_getter","sortableFields"],"mappings":";;;;+BAKaA;;;eAAAA;;;oCAHoD;8BAC1C;AAEhB,IAAA,AAAMA,2BAAN,MAAMA,iCAAiCC,gDAA4B;IAOxE,MAAgBC,YACdC,KAAe,EACfC,MAAc,EACO;QACnB,IAAI,CAACA,QAAQ,OAAOD;QAEpB,OAAOA,MAAMC,MAAM,CAAC,CAACC;YACnB,OAAOA,EAAEC,IAAI,CAACC,WAAW,GAAGC,QAAQ,CAACJ,OAAOG,WAAW;QACzD;IAEJ;IACAE,YAA4C;QAC1C,OAAOC,oBAAM;IACf;IAEUC,UACRR,KAAe,EACfS,IAAmB,EACnBC,QAA8B,EAC9BC,aAAmD,EACjD;QACA,OAAOF,OACL,KAAK,CAACD,UAAUR,OAAOS,MAAMC,YAC7B,KAAK,CAACF,UAAUR,OAAO,cAAc;IAE3C;;;aA3BAY,iBAA2B;YAAC;YAAQ;YAAc;SAAa;;AA4BjE"}