{"version":3,"sources":["../../../../../../../src/core/tenant/infra/db/sequelize/__tests__/tenant-sequelize.repository.int-spec.ts"],"sourcesContent":["import { TenantSequelizeRepository } from '../tenant-sequelize.repository';\nimport { Tenant } from '../../../../domain/tenant.entity';\nimport { TenantModel } from '../tenant.model';\nimport { Uuid } from '../../../../../shared/domain/value-objects/uuid.vo';\nimport { NotFoundError } from '../../../../../shared/domain/errors/not-found.error';\nimport { setupSequelize } from '../../../../../shared/infra/testing/helpers';\ndescribe('TenantSequelizeRepository integration tests', () => {\n  let repository: TenantSequelizeRepository;\n\n  setupSequelize({ models: [TenantModel] });\n  beforeEach(async () => {\n    repository = new TenantSequelizeRepository(TenantModel);\n  });\n\n  test('should insert a new tenant', async () => {\n    let tenant = Tenant.fake().aTenant().build();\n    await repository.insert(tenant);\n    let entity = await repository.findById(tenant.tenant_id);\n\n    expect(entity.toJSON()).toStrictEqual(tenant.toJSON());\n    \n  });\n\n  it('finds a entity by id', async () => {\n    let entityFound = await repository.findById(new Uuid());\n    expect(entityFound).toBeNull();\n\n    const entity = Tenant.fake().aTenant().build();\n    await repository.insert(entity);\n    entityFound = await repository.findById(entity.tenant_id);\n    expect(entityFound.toJSON()).toStrictEqual(entity.toJSON());\n\n  });\n\n  it('should return all entities', async () => {\n    const entity = Tenant.fake().aTenant().build();\n    await repository.insert(entity);\n    const entities = await repository.findAll();\n    expect(entities).toHaveLength(1);\n    expect(JSON.stringify(entities)).toBe(JSON.stringify([entity]));\n  });\n\n  it('should theow error on update when a entity not found', async () => {\n    const entity = Tenant.fake().aTenant().build();\n    await expect(repository.update(entity)).rejects.toThrow(\n      new NotFoundError(entity.tenant_id.id, Tenant),\n    );\n  });\n\n  it('should update a entity', async () => {\n    const entity = Tenant.fake().aTenant().build();\n    await repository.insert(entity);\n    entity.changeName('new name');\n    await repository.update(entity);\n    const entityFound = await repository.findById(entity.tenant_id);\n    expect(entityFound.toJSON()).toStrictEqual(entity.toJSON());\n  });\n\n  it('should throw error on delete when a entity not found', async () => {\n    const tenantId = new Uuid();\n    await expect(repository.delete(tenantId)).rejects.toThrow(\n      new NotFoundError(tenantId.id, Tenant),\n    );\n  });\n\n  it('should delete a entity', async () => {\n    const entity = Tenant.fake().aTenant().build();\n    await repository.insert(entity);\n    await repository.delete(entity.tenant_id);\n    const entityFound = await repository.findById(entity.tenant_id);\n    expect(entityFound).toBeNull();\n\n  });\n\n});"],"names":["describe","repository","setupSequelize","models","TenantModel","beforeEach","TenantSequelizeRepository","test","tenant","Tenant","fake","aTenant","build","insert","entity","findById","tenant_id","expect","toJSON","toStrictEqual","it","entityFound","Uuid","toBeNull","entities","findAll","toHaveLength","JSON","stringify","toBe","update","rejects","toThrow","NotFoundError","id","changeName","tenantId","delete"],"mappings":";;;;2CAA0C;8BACnB;6BACK;wBACP;+BACS;yBACC;AAC/BA,SAAS,+CAA+C;IACtD,IAAIC;IAEJC,IAAAA,uBAAc,EAAC;QAAEC,QAAQ;YAACC,wBAAW;SAAC;IAAC;IACvCC,WAAW;QACTJ,aAAa,IAAIK,oDAAyB,CAACF,wBAAW;IACxD;IAEAG,KAAK,8BAA8B;QACjC,IAAIC,SAASC,oBAAM,CAACC,IAAI,GAAGC,OAAO,GAAGC,KAAK;QAC1C,MAAMX,WAAWY,MAAM,CAACL;QACxB,IAAIM,SAAS,MAAMb,WAAWc,QAAQ,CAACP,OAAOQ,SAAS;QAEvDC,OAAOH,OAAOI,MAAM,IAAIC,aAAa,CAACX,OAAOU,MAAM;IAErD;IAEAE,GAAG,wBAAwB;QACzB,IAAIC,cAAc,MAAMpB,WAAWc,QAAQ,CAAC,IAAIO,YAAI;QACpDL,OAAOI,aAAaE,QAAQ;QAE5B,MAAMT,SAASL,oBAAM,CAACC,IAAI,GAAGC,OAAO,GAAGC,KAAK;QAC5C,MAAMX,WAAWY,MAAM,CAACC;QACxBO,cAAc,MAAMpB,WAAWc,QAAQ,CAACD,OAAOE,SAAS;QACxDC,OAAOI,YAAYH,MAAM,IAAIC,aAAa,CAACL,OAAOI,MAAM;IAE1D;IAEAE,GAAG,8BAA8B;QAC/B,MAAMN,SAASL,oBAAM,CAACC,IAAI,GAAGC,OAAO,GAAGC,KAAK;QAC5C,MAAMX,WAAWY,MAAM,CAACC;QACxB,MAAMU,WAAW,MAAMvB,WAAWwB,OAAO;QACzCR,OAAOO,UAAUE,YAAY,CAAC;QAC9BT,OAAOU,KAAKC,SAAS,CAACJ,WAAWK,IAAI,CAACF,KAAKC,SAAS,CAAC;YAACd;SAAO;IAC/D;IAEAM,GAAG,wDAAwD;QACzD,MAAMN,SAASL,oBAAM,CAACC,IAAI,GAAGC,OAAO,GAAGC,KAAK;QAC5C,MAAMK,OAAOhB,WAAW6B,MAAM,CAAChB,SAASiB,OAAO,CAACC,OAAO,CACrD,IAAIC,4BAAa,CAACnB,OAAOE,SAAS,CAACkB,EAAE,EAAEzB,oBAAM;IAEjD;IAEAW,GAAG,0BAA0B;QAC3B,MAAMN,SAASL,oBAAM,CAACC,IAAI,GAAGC,OAAO,GAAGC,KAAK;QAC5C,MAAMX,WAAWY,MAAM,CAACC;QACxBA,OAAOqB,UAAU,CAAC;QAClB,MAAMlC,WAAW6B,MAAM,CAAChB;QACxB,MAAMO,cAAc,MAAMpB,WAAWc,QAAQ,CAACD,OAAOE,SAAS;QAC9DC,OAAOI,YAAYH,MAAM,IAAIC,aAAa,CAACL,OAAOI,MAAM;IAC1D;IAEAE,GAAG,wDAAwD;QACzD,MAAMgB,WAAW,IAAId,YAAI;QACzB,MAAML,OAAOhB,WAAWoC,MAAM,CAACD,WAAWL,OAAO,CAACC,OAAO,CACvD,IAAIC,4BAAa,CAACG,SAASF,EAAE,EAAEzB,oBAAM;IAEzC;IAEAW,GAAG,0BAA0B;QAC3B,MAAMN,SAASL,oBAAM,CAACC,IAAI,GAAGC,OAAO,GAAGC,KAAK;QAC5C,MAAMX,WAAWY,MAAM,CAACC;QACxB,MAAMb,WAAWoC,MAAM,CAACvB,OAAOE,SAAS;QACxC,MAAMK,cAAc,MAAMpB,WAAWc,QAAQ,CAACD,OAAOE,SAAS;QAC9DC,OAAOI,aAAaE,QAAQ;IAE9B;AAEF"}