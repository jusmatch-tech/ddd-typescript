{"version":3,"sources":["../../../../../../src/core/tenant/infra/db/sequelize/tenant-sequelize.repository.ts"],"sourcesContent":["import { Op } from 'sequelize';\nimport { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\nimport { Tenant } from \"../../../domain/tenant.entity\";\nimport { ITenantRepository, TenantSearchParams, TenantSearchResult } from \"../../../domain/tenant.repository\";\nimport { TenantModel } from \"./tenant.model\";\nimport { NotFoundError } from '../../../../shared/domain/errors/not-found.error';\nimport { TenantModelMapper } from './tenant-model-mapper';\n\nexport class  TenantSequelizeRepository implements ITenantRepository{\n  sortableFields: string[] = ['created_at', 'name'];\n  \n  constructor(private tenantModel: typeof TenantModel ) {}\n\n  async insert(entity: Tenant): Promise<void> {\n    const modelProps = TenantModelMapper.toModel(entity);\n    await this.tenantModel.create(modelProps.toJSON());\n  }\n  async bulkInsert(entities: Tenant[]): Promise<void> {\n    const modelsProps = entities.map((entity) => \n      TenantModelMapper.toModel(entity).toJSON());\n    await this.tenantModel.bulkCreate(modelsProps);\n\n  }\n  async update(entity: Tenant): Promise<void> {\n    const id = entity.tenant_id.id;\n    const model = await this._get(id);\n    if (!model) {\n      throw new NotFoundError(id, this.getEntity());\n    } \n\n    const modelProps = TenantModelMapper.toModel(entity);\n    await this.tenantModel.update(\n      modelProps.toJSON(),\n      { where: { tenant_id: id } },\n    )\n  }\n\n  async delete(tenant_id: Uuid): Promise<void> {\n    const id = tenant_id.id;\n    const model = await this._get(id);\n    if (!model) {\n      throw new NotFoundError(id, this.getEntity());\n    } \n    await this.tenantModel.destroy({ where: { tenant_id: id } });\n\n  }\n\n  async findById(entity_id: Uuid): Promise<Tenant | null> {\n    const model = await this._get(entity_id.id);\n\n    return model ? TenantModelMapper.toEntity(model) : null;\n  }\n\n  private async _get(id: string){\n    return await this.tenantModel.findByPk(id);\n  }\n\n  async findAll(): Promise<Tenant[]> {\n    const models = await this.tenantModel.findAll();\n    return models.map((model) => {\n      return  TenantModelMapper.toEntity(model);\n    });\n  }\n\n  async search(props: TenantSearchParams): Promise<TenantSearchResult> {\n    const offset = (props.page - 1) * props.per_page;\n    const limit = props.per_page;\n    const { rows: models, count } = await this.tenantModel.findAndCountAll({\n      ...(props.filter && {\n        where: {\n          name: { [Op.like]: `%${props.filter}%` },\n        },\n      }),\n      ...(props.sort && this.sortableFields.includes(props.sort) \n      ? { order: [[props.sort, props.sort_dir]] }\n      : { order: [['created_at', 'desc']] }),\n      offset,\n      limit,\n    }); \n\n    return new TenantSearchResult({\n      items: models.map((model) => {\n        return TenantModelMapper.toEntity(model);\n      }),\n      current_page: props.page,\n      per_page: props.per_page,\n      total: count,\n      last_page: Math.ceil(count / props.per_page),\n    });\n  }\n\n  getEntity(): new (...args: any[]) => Tenant {\n    return Tenant;  \n  }\n  \n}"],"names":["TenantSequelizeRepository","insert","entity","modelProps","TenantModelMapper","toModel","tenantModel","create","toJSON","bulkInsert","entities","modelsProps","map","bulkCreate","update","id","tenant_id","model","_get","NotFoundError","getEntity","where","delete","destroy","findById","entity_id","toEntity","findByPk","findAll","models","search","props","offset","page","per_page","limit","rows","count","findAndCountAll","filter","name","Op","like","sort","sortableFields","includes","order","sort_dir","TenantSearchResult","items","current_page","total","last_page","Math","ceil","Tenant","constructor"],"mappings":"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"}