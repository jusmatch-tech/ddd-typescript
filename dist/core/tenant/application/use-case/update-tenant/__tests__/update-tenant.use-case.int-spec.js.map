{"version":3,"sources":["../../../../../../../src/core/tenant/application/use-case/update-tenant/__tests__/update-tenant.use-case.int-spec.ts"],"sourcesContent":["import { NotFoundError } from \"../../../../../shared/domain/errors/not-found.error\";\nimport { Uuid } from \"../../../../../shared/domain/value-objects/uuid.vo\";\nimport { setupSequelize } from \"../../../../../shared/infra/testing/helpers\";\nimport { Tenant } from \"../../../../domain/tenant.entity\";\nimport { TenantSequelizeRepository } from \"../../../../infra/db/sequelize/tenant-sequelize.repository\";\nimport { TenantModel } from \"../../../../infra/db/sequelize/tenant.model\";\nimport { UpdateTenantUseCase } from \"../update-tenant.use-case\";\n\ndescribe('UpdateTenantUseCase Integration tests', () => {\n  let useCase: UpdateTenantUseCase;\n  let repository: TenantSequelizeRepository;\n\n  setupSequelize( {models: [TenantModel]});\n\n  beforeEach(() => {\n    repository = new TenantSequelizeRepository(TenantModel);\n    useCase = new UpdateTenantUseCase(repository);\n  });\n\n  it('Should Throw error when entity not found', async () => { \n    const input = {\n      id: 'f0b8b6c4-aae6-4a0d-8d6e-6d8b1a8c8e4a',\n      name: 'new name'\n    };\n    await expect(useCase.execute(input)).rejects.toThrow(new NotFoundError(input.id, Tenant)); \n  });\n\n  it('Should update entity - name', async () => {\n    const entity = Tenant.fake().aTenant().build();\n    await repository.insert(entity);\n\n    let output = await useCase.execute({\n      id: entity.tenant_id.id,\n      name: 'new name'\n    });\n    expect(output).toStrictEqual({\n      id: entity.tenant_id.id,\n      name: 'new name',\n      description: entity.description,\n      is_active: true,\n      created_at: entity.created_at,\n      updated_at: entity.updated_at\n    });\n    type Arrange = {\n      input: {\n        id: string;\n        name: string;\n        description?: string | null;\n        is_active?: boolean;\n      },\n      expected: {\n        id: string;\n        name: string;\n        description?: string | null;\n        is_active?: boolean;\n        created_at: Date;\n        updated_at: Date;\n      }\n    }\n\n    const arrange: Arrange[] = [\n      {\n        input: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          description: 'some description',\n        },\n        expected: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          description: 'some description',\n          is_active: true,\n          created_at: entity.created_at,\n          updated_at: entity.updated_at\n        }\n      },\n      {\n        input: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          description: null,\n        },\n        expected: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          description: null,\n          is_active: true,\n          created_at: entity.created_at,\n          updated_at: entity.updated_at\n        }\n      },\n      {\n        input: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          is_active: false,\n        },\n        expected: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          description: null,\n          is_active: false,\n          created_at: entity.created_at,\n          updated_at: entity.updated_at\n        }\n      },\n      {\n        input: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          is_active: true,\n        },\n        expected: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          description: null,\n          is_active: true,\n          created_at: entity.created_at,\n          updated_at: entity.updated_at\n        }\n      }\n    ];\n\n    for (const i of arrange) {\n      output = await useCase.execute({\n        id: i.input.id,\n        ...(\"name\" in i.input && { name: i.input.name }),\n        ...(\"description\" in i.input && { description: i.input.description }),\n        ...(\"is_active\" in i.input && { is_active: i.input.is_active }),\n      });\n      const entityUpdated = await repository.findById(new Uuid(i.input.id));\n      \n      expect(output).toStrictEqual({\n        id: entity.tenant_id.id,\n        name: i.expected.name,\n        description: i.expected.description,\n        is_active: i.expected.is_active,\n        created_at: entityUpdated.created_at,\n        updated_at: entityUpdated.updated_at\n      });\n    }\n\n  });\n\n\n});"],"names":["describe","useCase","repository","setupSequelize","models","TenantModel","beforeEach","TenantSequelizeRepository","UpdateTenantUseCase","it","input","id","name","expect","execute","rejects","toThrow","NotFoundError","Tenant","entity","fake","aTenant","build","insert","output","tenant_id","toStrictEqual","description","is_active","created_at","updated_at","arrange","expected","i","entityUpdated","findById","Uuid"],"mappings":"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"}