{"version":3,"sources":["../../../../../../../src/core/tenant/application/use-case/update-tenant/__tests__/update-tenant.use-case.spec.ts"],"sourcesContent":["import { Not } from \"sequelize-typescript\";\nimport { InvalidUuidError, Uuid } from \"../../../../../shared/domain/value-objects/uuid.vo\";\nimport { TenantInMemoryRepository } from \"../../../../infra/db/in-memory/tenant-in-memory.repository\";\nimport { UpdateTenantUseCase } from \"../update-tenant.use-case\";\nimport { Tenant } from \"../../../../domain/tenant.entity\";\nimport { NotFoundError } from \"../../../../../shared/domain/errors/not-found.error\";\n\ndescribe('UpdateTenantUseCase Unit tests', () => {\n  let useCase: UpdateTenantUseCase;\n  let repository: TenantInMemoryRepository;\n\n  beforeEach(() => {\n    repository = new TenantInMemoryRepository();\n    useCase = new UpdateTenantUseCase(repository);\n  });\n\n  it('should throw error when entity not found - invalid UUID', async () => {\n    const input = {\n      id: 'invalid-uuid',\n      name: 'new name'\n    };\n    await expect(useCase.execute(input)).rejects.toThrow(new InvalidUuidError());\n  });\n\n  it('should throw error when entity not found - valid UUID', async () => {\n    const input = {\n      id: 'f0b8b6c4-aae6-4a0d-8d6e-6d8b1a8c8e4a',\n      name: 'new name'\n    };\n    await expect(useCase.execute(input)).rejects.toThrow(new NotFoundError(input.id, Tenant));\n  });\n\n  it('should update entity - name', async () => {\n    const spyUpdate = jest.spyOn(repository, 'update');\n    const entity = new Tenant({\n      name: 'name',\n    });\n    repository.items = [entity];\n\n    let output = await useCase.execute({\n      id: entity.tenant_id.id,\n      name: 'new name'\n    });\n\n    expect(spyUpdate).toHaveBeenCalledTimes(1);\n    expect(output).toStrictEqual({\n      id: entity.tenant_id.id,\n      name: 'new name',\n      description: null,\n      is_active: true,\n      created_at: entity.created_at,\n      updated_at: entity.updated_at\n    });\n\n    type Arrange = {\n      input: {\n        id: string;\n        name: string;\n        description?: string | null;\n        is_active?: boolean;\n      },\n      expected: {\n        id: string;\n        name: string;\n        description?: string | null;\n        is_active?: boolean;\n        created_at: Date;\n        updated_at: Date;\n      }\n    }\n\n    const arrange: Arrange[] = [\n      {\n        input: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          description: 'some description',\n        },\n        expected: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          description: 'some description',\n          is_active: true,\n          created_at: entity.created_at,\n          updated_at: entity.updated_at\n        }\n      },\n      {\n        input: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          description: null,\n        },\n        expected: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          description: null,\n          is_active: true,\n          created_at: entity.created_at,\n          updated_at: entity.updated_at\n        }\n      },\n      {\n        input: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          is_active: false,\n        },\n        expected: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          description: null,\n          is_active: false,\n          created_at: entity.created_at,\n          updated_at: entity.updated_at\n        }\n      },\n      {\n        input: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          is_active: true,\n        },\n        expected: {\n          id: entity.tenant_id.id,\n          name: 'test',\n          description: null,\n          is_active: true,\n          created_at: entity.created_at,\n          updated_at: entity.updated_at\n        }\n      }\n    ];\n\n    for (const i of arrange) {\n      output = await useCase.execute({\n        id: i.input.id,\n        ...(\"name\" in i.input && { name: i.input.name }),\n        ...(\"description\" in i.input && { description: i.input.description }),\n        ...(\"is_active\" in i.input && { is_active: i.input.is_active }),\n      });\n      const entityUpdated = await repository.findById(new Uuid(i.input.id));\n      expect(output).toStrictEqual({\n        id: entity.tenant_id.id,\n        name: i.expected.name,\n        description: i.expected.description,\n        is_active: i.expected.is_active,\n        created_at: entityUpdated.created_at,\n        updated_at: entityUpdated.updated_at\n      });\n\n\n    }\n  }); \n});"],"names":["describe","useCase","repository","beforeEach","TenantInMemoryRepository","UpdateTenantUseCase","it","input","id","name","expect","execute","rejects","toThrow","InvalidUuidError","NotFoundError","Tenant","spyUpdate","jest","spyOn","entity","items","output","tenant_id","toHaveBeenCalledTimes","toStrictEqual","description","is_active","created_at","updated_at","arrange","expected","i","entityUpdated","findById","Uuid"],"mappings":";;;;wBACuC;0CACE;qCACL;8BACb;+BACO;AAE9BA,SAAS,kCAAkC;IACzC,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACTD,aAAa,IAAIE,kDAAwB;QACzCH,UAAU,IAAII,wCAAmB,CAACH;IACpC;IAEAI,GAAG,2DAA2D;QAC5D,MAAMC,QAAQ;YACZC,IAAI;YACJC,MAAM;QACR;QACA,MAAMC,OAAOT,QAAQU,OAAO,CAACJ,QAAQK,OAAO,CAACC,OAAO,CAAC,IAAIC,wBAAgB;IAC3E;IAEAR,GAAG,yDAAyD;QAC1D,MAAMC,QAAQ;YACZC,IAAI;YACJC,MAAM;QACR;QACA,MAAMC,OAAOT,QAAQU,OAAO,CAACJ,QAAQK,OAAO,CAACC,OAAO,CAAC,IAAIE,4BAAa,CAACR,MAAMC,EAAE,EAAEQ,oBAAM;IACzF;IAEAV,GAAG,+BAA+B;QAChC,MAAMW,YAAYC,KAAKC,KAAK,CAACjB,YAAY;QACzC,MAAMkB,SAAS,IAAIJ,oBAAM,CAAC;YACxBP,MAAM;QACR;QACAP,WAAWmB,KAAK,GAAG;YAACD;SAAO;QAE3B,IAAIE,SAAS,MAAMrB,QAAQU,OAAO,CAAC;YACjCH,IAAIY,OAAOG,SAAS,CAACf,EAAE;YACvBC,MAAM;QACR;QAEAC,OAAOO,WAAWO,qBAAqB,CAAC;QACxCd,OAAOY,QAAQG,aAAa,CAAC;YAC3BjB,IAAIY,OAAOG,SAAS,CAACf,EAAE;YACvBC,MAAM;YACNiB,aAAa;YACbC,WAAW;YACXC,YAAYR,OAAOQ,UAAU;YAC7BC,YAAYT,OAAOS,UAAU;QAC/B;QAmBA,MAAMC,UAAqB;YACzB;gBACEvB,OAAO;oBACLC,IAAIY,OAAOG,SAAS,CAACf,EAAE;oBACvBC,MAAM;oBACNiB,aAAa;gBACf;gBACAK,UAAU;oBACRvB,IAAIY,OAAOG,SAAS,CAACf,EAAE;oBACvBC,MAAM;oBACNiB,aAAa;oBACbC,WAAW;oBACXC,YAAYR,OAAOQ,UAAU;oBAC7BC,YAAYT,OAAOS,UAAU;gBAC/B;YACF;YACA;gBACEtB,OAAO;oBACLC,IAAIY,OAAOG,SAAS,CAACf,EAAE;oBACvBC,MAAM;oBACNiB,aAAa;gBACf;gBACAK,UAAU;oBACRvB,IAAIY,OAAOG,SAAS,CAACf,EAAE;oBACvBC,MAAM;oBACNiB,aAAa;oBACbC,WAAW;oBACXC,YAAYR,OAAOQ,UAAU;oBAC7BC,YAAYT,OAAOS,UAAU;gBAC/B;YACF;YACA;gBACEtB,OAAO;oBACLC,IAAIY,OAAOG,SAAS,CAACf,EAAE;oBACvBC,MAAM;oBACNkB,WAAW;gBACb;gBACAI,UAAU;oBACRvB,IAAIY,OAAOG,SAAS,CAACf,EAAE;oBACvBC,MAAM;oBACNiB,aAAa;oBACbC,WAAW;oBACXC,YAAYR,OAAOQ,UAAU;oBAC7BC,YAAYT,OAAOS,UAAU;gBAC/B;YACF;YACA;gBACEtB,OAAO;oBACLC,IAAIY,OAAOG,SAAS,CAACf,EAAE;oBACvBC,MAAM;oBACNkB,WAAW;gBACb;gBACAI,UAAU;oBACRvB,IAAIY,OAAOG,SAAS,CAACf,EAAE;oBACvBC,MAAM;oBACNiB,aAAa;oBACbC,WAAW;oBACXC,YAAYR,OAAOQ,UAAU;oBAC7BC,YAAYT,OAAOS,UAAU;gBAC/B;YACF;SACD;QAED,KAAK,MAAMG,KAAKF,QAAS;YACvBR,SAAS,MAAMrB,QAAQU,OAAO,CAAC;gBAC7BH,IAAIwB,EAAEzB,KAAK,CAACC,EAAE;gBACd,GAAI,UAAUwB,EAAEzB,KAAK,IAAI;oBAAEE,MAAMuB,EAAEzB,KAAK,CAACE,IAAI;gBAAC,CAAC;gBAC/C,GAAI,iBAAiBuB,EAAEzB,KAAK,IAAI;oBAAEmB,aAAaM,EAAEzB,KAAK,CAACmB,WAAW;gBAAC,CAAC;gBACpE,GAAI,eAAeM,EAAEzB,KAAK,IAAI;oBAAEoB,WAAWK,EAAEzB,KAAK,CAACoB,SAAS;gBAAC,CAAC;YAChE;YACA,MAAMM,gBAAgB,MAAM/B,WAAWgC,QAAQ,CAAC,IAAIC,YAAI,CAACH,EAAEzB,KAAK,CAACC,EAAE;YACnEE,OAAOY,QAAQG,aAAa,CAAC;gBAC3BjB,IAAIY,OAAOG,SAAS,CAACf,EAAE;gBACvBC,MAAMuB,EAAED,QAAQ,CAACtB,IAAI;gBACrBiB,aAAaM,EAAED,QAAQ,CAACL,WAAW;gBACnCC,WAAWK,EAAED,QAAQ,CAACJ,SAAS;gBAC/BC,YAAYK,cAAcL,UAAU;gBACpCC,YAAYI,cAAcJ,UAAU;YACtC;QAGF;IACF;AACF"}