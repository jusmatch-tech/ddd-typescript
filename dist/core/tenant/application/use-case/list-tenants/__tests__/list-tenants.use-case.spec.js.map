{"version":3,"sources":["../../../../../../../src/core/tenant/application/use-case/list-tenants/__tests__/list-tenants.use-case.spec.ts"],"sourcesContent":["import { Tenant } from \"../../../../domain/tenant.entity\";\nimport { TenantSearchResult } from \"../../../../domain/tenant.repository\";\nimport { TenantInMemoryRepository } from \"../../../../infra/db/in-memory/tenant-in-memory.repository\";\nimport { TenantOutputMapper } from \"../../common/tenant-output\";\nimport { ListTenantsUseCase } from \"../list-tenants.use-case\";\n\ndescribe('ListTenantUseCase Unit tests', () => {\n  let useCase: ListTenantsUseCase;\n  let repository: TenantInMemoryRepository;\n\n  beforeEach(() => {\n    repository = new TenantInMemoryRepository();\n    useCase = new ListTenantsUseCase(repository);\n  });\n\n\n  test('output method', async () => {\n    let result = new TenantSearchResult({\n      items: [],\n      total: 1,\n      current_page: 1,\n      per_page: 2,\n      last_page: 1,\n    });\n    let output = useCase['toOutput'](result);\n    expect(output).toStrictEqual({\n      items: [],\n      total: 1,\n      current_page: 1,\n      per_page: 2,\n      last_page: 1,\n    })\n\n    const entity = Tenant.create({ name: 'test' });\n    result = new TenantSearchResult({\n      items: [entity],\n      total: 1,\n      current_page: 1,\n      per_page: 2,\n      last_page: 1,\n    });\n    output = useCase['toOutput'](result);\n    expect(output).toStrictEqual({\n      items: [entity].map(TenantOutputMapper.toOutput),\n      total: 1,\n      current_page: 1,\n      per_page: 2,\n      last_page: 1,\n    });    \n  });\n\n  it('should return output soprted by created_at when input params is empty', async () => {\n    const items = [\n      new Tenant({ name: 'test1' }),\n      new Tenant({ \n        name: 'test2',\n        created_at: new Date(new Date().getTime() + 1000),\n      }),\n    ];\n    repository.items = items;\n\n    const output = await useCase.execute({});\n\n    expect(output).toStrictEqual({\n      items: [...items].reverse().map(TenantOutputMapper.toOutput),\n      total: 2,\n      current_page: 1,\n      per_page: 15,\n      last_page: 1,\n    });\n  });\n\n  it('should return output using pagination, sort and filter', async () => { \n    const items = [\n      new Tenant({ name: 'a' }),\n      new Tenant({ \n        name: 'AAA' \n      }),\n      new Tenant({ \n        name: 'AaA' \n      }),\n      new Tenant({ \n        name: 'b' \n      }),\n      new Tenant({ \n        name: 'c' \n      }),\n    ];\n    repository.items = items;\n\n    let output = await useCase.execute({\n      page: 1,\n      per_page: 2,\n      sort: 'name',\n      sort_dir: 'asc',\n      filter:  'a'\n    });\n    expect(output).toStrictEqual({\n      items: [items[1], items[2]].map(TenantOutputMapper.toOutput),\n      total: 3,\n      current_page: 1,\n      per_page: 2,\n      last_page: 2,\n    });\n\n    output = await useCase.execute({\n      page: 2,\n      per_page: 2,\n      sort: 'name',\n      sort_dir: 'asc',\n      filter:  'a'\n    });\n    expect(output).toStrictEqual({\n      items: [items[0]].map(TenantOutputMapper.toOutput),\n      total: 3,\n      current_page: 2,\n      per_page: 2,\n      last_page: 2,\n    });\n\n    output = await useCase.execute({\n      page: 1,\n      per_page: 2,\n      sort: 'name',\n      sort_dir: 'desc',\n      filter:  'a'\n    });\n    expect(output).toStrictEqual({\n      items: [items[0], items[2]].map(TenantOutputMapper.toOutput),\n      total: 3,\n      current_page: 1,\n      per_page: 2,\n      last_page: 2,\n    });\n\n  });\n\n});"],"names":["describe","useCase","repository","beforeEach","TenantInMemoryRepository","ListTenantsUseCase","test","result","TenantSearchResult","items","total","current_page","per_page","last_page","output","expect","toStrictEqual","entity","Tenant","create","name","map","TenantOutputMapper","toOutput","it","created_at","Date","getTime","execute","reverse","page","sort","sort_dir","filter"],"mappings":";;;;8BAAuB;kCACY;0CACM;8BACN;oCACA;AAEnCA,SAAS,gCAAgC;IACvC,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACTD,aAAa,IAAIE,kDAAwB;QACzCH,UAAU,IAAII,sCAAkB,CAACH;IACnC;IAGAI,KAAK,iBAAiB;QACpB,IAAIC,SAAS,IAAIC,oCAAkB,CAAC;YAClCC,OAAO,EAAE;YACTC,OAAO;YACPC,cAAc;YACdC,UAAU;YACVC,WAAW;QACb;QACA,IAAIC,SAASb,OAAO,CAAC,WAAW,CAACM;QACjCQ,OAAOD,QAAQE,aAAa,CAAC;YAC3BP,OAAO,EAAE;YACTC,OAAO;YACPC,cAAc;YACdC,UAAU;YACVC,WAAW;QACb;QAEA,MAAMI,SAASC,oBAAM,CAACC,MAAM,CAAC;YAAEC,MAAM;QAAO;QAC5Cb,SAAS,IAAIC,oCAAkB,CAAC;YAC9BC,OAAO;gBAACQ;aAAO;YACfP,OAAO;YACPC,cAAc;YACdC,UAAU;YACVC,WAAW;QACb;QACAC,SAASb,OAAO,CAAC,WAAW,CAACM;QAC7BQ,OAAOD,QAAQE,aAAa,CAAC;YAC3BP,OAAO;gBAACQ;aAAO,CAACI,GAAG,CAACC,gCAAkB,CAACC,QAAQ;YAC/Cb,OAAO;YACPC,cAAc;YACdC,UAAU;YACVC,WAAW;QACb;IACF;IAEAW,GAAG,yEAAyE;QAC1E,MAAMf,QAAQ;YACZ,IAAIS,oBAAM,CAAC;gBAAEE,MAAM;YAAQ;YAC3B,IAAIF,oBAAM,CAAC;gBACTE,MAAM;gBACNK,YAAY,IAAIC,KAAK,IAAIA,OAAOC,OAAO,KAAK;YAC9C;SACD;QACDzB,WAAWO,KAAK,GAAGA;QAEnB,MAAMK,SAAS,MAAMb,QAAQ2B,OAAO,CAAC,CAAC;QAEtCb,OAAOD,QAAQE,aAAa,CAAC;YAC3BP,OAAO;mBAAIA;aAAM,CAACoB,OAAO,GAAGR,GAAG,CAACC,gCAAkB,CAACC,QAAQ;YAC3Db,OAAO;YACPC,cAAc;YACdC,UAAU;YACVC,WAAW;QACb;IACF;IAEAW,GAAG,0DAA0D;QAC3D,MAAMf,QAAQ;YACZ,IAAIS,oBAAM,CAAC;gBAAEE,MAAM;YAAI;YACvB,IAAIF,oBAAM,CAAC;gBACTE,MAAM;YACR;YACA,IAAIF,oBAAM,CAAC;gBACTE,MAAM;YACR;YACA,IAAIF,oBAAM,CAAC;gBACTE,MAAM;YACR;YACA,IAAIF,oBAAM,CAAC;gBACTE,MAAM;YACR;SACD;QACDlB,WAAWO,KAAK,GAAGA;QAEnB,IAAIK,SAAS,MAAMb,QAAQ2B,OAAO,CAAC;YACjCE,MAAM;YACNlB,UAAU;YACVmB,MAAM;YACNC,UAAU;YACVC,QAAS;QACX;QACAlB,OAAOD,QAAQE,aAAa,CAAC;YAC3BP,OAAO;gBAACA,KAAK,CAAC,EAAE;gBAAEA,KAAK,CAAC,EAAE;aAAC,CAACY,GAAG,CAACC,gCAAkB,CAACC,QAAQ;YAC3Db,OAAO;YACPC,cAAc;YACdC,UAAU;YACVC,WAAW;QACb;QAEAC,SAAS,MAAMb,QAAQ2B,OAAO,CAAC;YAC7BE,MAAM;YACNlB,UAAU;YACVmB,MAAM;YACNC,UAAU;YACVC,QAAS;QACX;QACAlB,OAAOD,QAAQE,aAAa,CAAC;YAC3BP,OAAO;gBAACA,KAAK,CAAC,EAAE;aAAC,CAACY,GAAG,CAACC,gCAAkB,CAACC,QAAQ;YACjDb,OAAO;YACPC,cAAc;YACdC,UAAU;YACVC,WAAW;QACb;QAEAC,SAAS,MAAMb,QAAQ2B,OAAO,CAAC;YAC7BE,MAAM;YACNlB,UAAU;YACVmB,MAAM;YACNC,UAAU;YACVC,QAAS;QACX;QACAlB,OAAOD,QAAQE,aAAa,CAAC;YAC3BP,OAAO;gBAACA,KAAK,CAAC,EAAE;gBAAEA,KAAK,CAAC,EAAE;aAAC,CAACY,GAAG,CAACC,gCAAkB,CAACC,QAAQ;YAC3Db,OAAO;YACPC,cAAc;YACdC,UAAU;YACVC,WAAW;QACb;IAEF;AAEF"}