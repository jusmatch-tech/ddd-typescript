{"version":3,"sources":["../../../../../../../src/core/tenant/application/use-case/list-tenants/__tests__/list-tenants.use-case.int-spec.ts"],"sourcesContent":["import { setupSequelize } from \"../../../../../shared/infra/testing/helpers\";\nimport { Tenant } from \"../../../../domain/tenant.entity\";\nimport { TenantSequelizeRepository } from \"../../../../infra/db/sequelize/tenant-sequelize.repository\";\nimport { TenantModel } from \"../../../../infra/db/sequelize/tenant.model\";\nimport { TenantOutputMapper } from \"../../common/tenant-output\";\nimport { ListTenantsUseCase } from \"../list-tenants.use-case\";\n\ndescribe('ListTenantUseCase Integration tests', () => {\n  let useCase: ListTenantsUseCase;\n  let repository: TenantSequelizeRepository\n\n  setupSequelize({ models: [TenantModel] });\n\n  beforeEach(() => {\n    repository = new TenantSequelizeRepository(TenantModel);\n    useCase = new ListTenantsUseCase(repository);\n  });\n\n\n  it('should return output soprted by created_at when input params is empty', async () => {\n    const tenants  = Tenant.fake()\n      .theTenants(2)\n      .withCreatedAt((i) => new Date(new Date().getTime() + 1000 + i))\n      .build();\n\n    await repository.bulkInsert(tenants);\n\n    const output = await useCase.execute({});\n    expect(output).toEqual({\n      items: [...tenants].reverse().map(TenantOutputMapper.toOutput),\n      total: 2,\n      current_page: 1,\n      per_page: 15,\n      last_page: 1,\n    });\n  });\n\n  it('should return output using pagination, sort and filter', async () => { \n    const items = [\n      new Tenant({ name: 'a' }),\n      new Tenant({ \n        name: 'AAA' \n      }),\n      new Tenant({ \n        name: 'AaA' \n      }),\n      new Tenant({ \n        name: 'b' \n      }),\n      new Tenant({ \n        name: 'c' \n      }),\n    ];\n    await repository.bulkInsert(items);\n\n    let output = await useCase.execute({\n      page: 1,\n      per_page: 2,\n      sort: 'name',\n      sort_dir: 'asc',\n      filter:  'a'\n    });\n    expect(output).toEqual({\n      items: [items[1], items[2]].map(TenantOutputMapper.toOutput),\n      total: 3,\n      current_page: 1,\n      per_page: 2,\n      last_page: 2,\n    });\n\n    output = await useCase.execute({\n      page: 2,\n      per_page: 2,\n      sort: 'name',\n      sort_dir: 'asc',\n      filter:  'a'\n    });\n    expect(output).toEqual({\n      items: [items[0]].map(TenantOutputMapper.toOutput),\n      total: 3,\n      current_page: 2,\n      per_page: 2,\n      last_page: 2,\n    });\n\n    output = await useCase.execute({\n      page: 1,\n      per_page: 2,\n      sort: 'name',\n      sort_dir: 'desc',\n      filter:  'a'\n    });\n    expect(output).toStrictEqual({\n      items: [items[0], items[2]].map(TenantOutputMapper.toOutput),\n      total: 3,\n      current_page: 1,\n      per_page: 2,\n      last_page: 2,\n    });\n\n  });\n\n});"],"names":["describe","useCase","repository","setupSequelize","models","TenantModel","beforeEach","TenantSequelizeRepository","ListTenantsUseCase","it","tenants","Tenant","fake","theTenants","withCreatedAt","i","Date","getTime","build","bulkInsert","output","execute","expect","toEqual","items","reverse","map","TenantOutputMapper","toOutput","total","current_page","per_page","last_page","name","page","sort","sort_dir","filter","toStrictEqual"],"mappings":";;;;yBAA+B;8BACR;2CACmB;6BACd;8BACO;oCACA;AAEnCA,SAAS,uCAAuC;IAC9C,IAAIC;IACJ,IAAIC;IAEJC,IAAAA,uBAAc,EAAC;QAAEC,QAAQ;YAACC,wBAAW;SAAC;IAAC;IAEvCC,WAAW;QACTJ,aAAa,IAAIK,oDAAyB,CAACF,wBAAW;QACtDJ,UAAU,IAAIO,sCAAkB,CAACN;IACnC;IAGAO,GAAG,yEAAyE;QAC1E,MAAMC,UAAWC,oBAAM,CAACC,IAAI,GACzBC,UAAU,CAAC,GACXC,aAAa,CAAC,CAACC,IAAM,IAAIC,KAAK,IAAIA,OAAOC,OAAO,KAAK,OAAOF,IAC5DG,KAAK;QAER,MAAMhB,WAAWiB,UAAU,CAACT;QAE5B,MAAMU,SAAS,MAAMnB,QAAQoB,OAAO,CAAC,CAAC;QACtCC,OAAOF,QAAQG,OAAO,CAAC;YACrBC,OAAO;mBAAId;aAAQ,CAACe,OAAO,GAAGC,GAAG,CAACC,gCAAkB,CAACC,QAAQ;YAC7DC,OAAO;YACPC,cAAc;YACdC,UAAU;YACVC,WAAW;QACb;IACF;IAEAvB,GAAG,0DAA0D;QAC3D,MAAMe,QAAQ;YACZ,IAAIb,oBAAM,CAAC;gBAAEsB,MAAM;YAAI;YACvB,IAAItB,oBAAM,CAAC;gBACTsB,MAAM;YACR;YACA,IAAItB,oBAAM,CAAC;gBACTsB,MAAM;YACR;YACA,IAAItB,oBAAM,CAAC;gBACTsB,MAAM;YACR;YACA,IAAItB,oBAAM,CAAC;gBACTsB,MAAM;YACR;SACD;QACD,MAAM/B,WAAWiB,UAAU,CAACK;QAE5B,IAAIJ,SAAS,MAAMnB,QAAQoB,OAAO,CAAC;YACjCa,MAAM;YACNH,UAAU;YACVI,MAAM;YACNC,UAAU;YACVC,QAAS;QACX;QACAf,OAAOF,QAAQG,OAAO,CAAC;YACrBC,OAAO;gBAACA,KAAK,CAAC,EAAE;gBAAEA,KAAK,CAAC,EAAE;aAAC,CAACE,GAAG,CAACC,gCAAkB,CAACC,QAAQ;YAC3DC,OAAO;YACPC,cAAc;YACdC,UAAU;YACVC,WAAW;QACb;QAEAZ,SAAS,MAAMnB,QAAQoB,OAAO,CAAC;YAC7Ba,MAAM;YACNH,UAAU;YACVI,MAAM;YACNC,UAAU;YACVC,QAAS;QACX;QACAf,OAAOF,QAAQG,OAAO,CAAC;YACrBC,OAAO;gBAACA,KAAK,CAAC,EAAE;aAAC,CAACE,GAAG,CAACC,gCAAkB,CAACC,QAAQ;YACjDC,OAAO;YACPC,cAAc;YACdC,UAAU;YACVC,WAAW;QACb;QAEAZ,SAAS,MAAMnB,QAAQoB,OAAO,CAAC;YAC7Ba,MAAM;YACNH,UAAU;YACVI,MAAM;YACNC,UAAU;YACVC,QAAS;QACX;QACAf,OAAOF,QAAQkB,aAAa,CAAC;YAC3Bd,OAAO;gBAACA,KAAK,CAAC,EAAE;gBAAEA,KAAK,CAAC,EAAE;aAAC,CAACE,GAAG,CAACC,gCAAkB,CAACC,QAAQ;YAC3DC,OAAO;YACPC,cAAc;YACdC,UAAU;YACVC,WAAW;QACb;IAEF;AAEF"}