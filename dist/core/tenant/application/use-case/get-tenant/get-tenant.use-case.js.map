{"version":3,"sources":["../../../../../../src/core/tenant/application/use-case/get-tenant/get-tenant.use-case.ts"],"sourcesContent":["import { IUseCase } from \"../../../../shared/application/use-case.interface\";\nimport { NotFoundError } from \"../../../../shared/domain/errors/not-found.error\";\nimport { Uuid } from \"../../../../shared/domain/value-objects/uuid.vo\";\nimport { Tenant } from \"../../../domain/tenant.entity\";\nimport { ITenantRepository } from \"../../../domain/tenant.repository\";\nimport { TenantOutput, TenantOutputMapper } from \"../common/tenant-output\";\nimport { GetTenantInput } from \"./get-tenant.input\";\n\nexport class GetTenantUseCase implements IUseCase<GetTenantInput, GetTenantOutput> {\n  constructor(private readonly tenantRepo: ITenantRepository) { }\n\n  async execute(input: GetTenantInput): Promise<GetTenantOutput> {\n    const uuid = new Uuid(input.id);\n    const entity = await this.tenantRepo.findById(uuid);\n\n    if (!entity) {\n      throw new NotFoundError(input.id, Tenant);\n    }\n\n    return TenantOutputMapper.toOutput(entity);\n  }\n}\n\nexport type GetTenantOutput = TenantOutput;"],"names":["GetTenantUseCase","execute","input","uuid","Uuid","id","entity","tenantRepo","findById","NotFoundError","Tenant","TenantOutputMapper","toOutput","constructor"],"mappings":";;;;+BAQaA;;;eAAAA;;;+BAPiB;wBACT;8BACE;8BAE0B;AAG1C,IAAA,AAAMA,mBAAN,MAAMA;IAGX,MAAMC,QAAQC,KAAqB,EAA4B;QAC7D,MAAMC,OAAO,IAAIC,YAAI,CAACF,MAAMG,EAAE;QAC9B,MAAMC,SAAS,MAAM,IAAI,CAACC,UAAU,CAACC,QAAQ,CAACL;QAE9C,IAAI,CAACG,QAAQ;YACX,MAAM,IAAIG,4BAAa,CAACP,MAAMG,EAAE,EAAEK,oBAAM;QAC1C;QAEA,OAAOC,gCAAkB,CAACC,QAAQ,CAACN;IACrC;IAXAO,YAAY,AAAiBN,UAA6B,CAAE;aAA/BA,aAAAA;IAAiC;AAYhE"}