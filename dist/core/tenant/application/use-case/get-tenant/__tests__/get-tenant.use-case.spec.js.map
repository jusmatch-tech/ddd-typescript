{"version":3,"sources":["../../../../../../../src/core/tenant/application/use-case/get-tenant/__tests__/get-tenant.use-case.spec.ts"],"sourcesContent":["import { NotFoundError } from \"../../../../../shared/domain/errors/not-found.error\";\nimport { InvalidUuidError } from \"../../../../../shared/domain/value-objects/uuid.vo\";\nimport { Tenant } from \"../../../../domain/tenant.entity\";\nimport { TenantInMemoryRepository } from \"../../../../infra/db/in-memory/tenant-in-memory.repository\";\nimport { GetTenantUseCase } from \"../get-tenant.use-case\";\n\ndescribe('GetTenantUseCase Unit tests', () => {\n  let useCase: GetTenantUseCase;\n  let repository: TenantInMemoryRepository;\n\n  beforeEach(() => {\n    repository = new TenantInMemoryRepository();\n    useCase = new GetTenantUseCase(repository);\n  });\n\n  it('should throw error when entity not found - invalid UUID', async () => {\n    const input = {\n      id: 'invalid-uuid',\n    };\n    await expect(useCase.execute(input)).rejects.toThrow(new InvalidUuidError());\n  });\n\n  it('should throw error when entity not found - valid UUID', async () => {\n    const input = {\n      id: 'f0b8b6c4-aae6-4a0d-8d6e-6d8b1a8c8e4a',\n    };\n    await expect(useCase.execute(input)).rejects.toThrow(new NotFoundError(input.id, Tenant));\n  });\n\n  it('should get entity', async () => {\n    const spyFindById = jest.spyOn(repository, 'findById');\n    const entity = new Tenant({\n      name: 'name',\n    });\n    repository.items = [entity];\n\n    let output = await useCase.execute({\n      id: entity.tenant_id.id,\n    });\n\n    expect(spyFindById).toHaveBeenCalledTimes(1);\n    expect(output).toStrictEqual({\n      id: entity.tenant_id.id,\n      name: 'name',\n      description: null,\n      is_active: true,\n      created_at: entity.created_at,\n      updated_at: entity.updated_at\n    });\n  });\n\n});"],"names":["describe","useCase","repository","beforeEach","TenantInMemoryRepository","GetTenantUseCase","it","input","id","expect","execute","rejects","toThrow","InvalidUuidError","NotFoundError","Tenant","spyFindById","jest","spyOn","entity","name","items","output","tenant_id","toHaveBeenCalledTimes","toStrictEqual","description","is_active","created_at","updated_at"],"mappings":";;;;+BAA8B;wBACG;8BACV;0CACkB;kCACR;AAEjCA,SAAS,+BAA+B;IACtC,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACTD,aAAa,IAAIE,kDAAwB;QACzCH,UAAU,IAAII,kCAAgB,CAACH;IACjC;IAEAI,GAAG,2DAA2D;QAC5D,MAAMC,QAAQ;YACZC,IAAI;QACN;QACA,MAAMC,OAAOR,QAAQS,OAAO,CAACH,QAAQI,OAAO,CAACC,OAAO,CAAC,IAAIC,wBAAgB;IAC3E;IAEAP,GAAG,yDAAyD;QAC1D,MAAMC,QAAQ;YACZC,IAAI;QACN;QACA,MAAMC,OAAOR,QAAQS,OAAO,CAACH,QAAQI,OAAO,CAACC,OAAO,CAAC,IAAIE,4BAAa,CAACP,MAAMC,EAAE,EAAEO,oBAAM;IACzF;IAEAT,GAAG,qBAAqB;QACtB,MAAMU,cAAcC,KAAKC,KAAK,CAAChB,YAAY;QAC3C,MAAMiB,SAAS,IAAIJ,oBAAM,CAAC;YACxBK,MAAM;QACR;QACAlB,WAAWmB,KAAK,GAAG;YAACF;SAAO;QAE3B,IAAIG,SAAS,MAAMrB,QAAQS,OAAO,CAAC;YACjCF,IAAIW,OAAOI,SAAS,CAACf,EAAE;QACzB;QAEAC,OAAOO,aAAaQ,qBAAqB,CAAC;QAC1Cf,OAAOa,QAAQG,aAAa,CAAC;YAC3BjB,IAAIW,OAAOI,SAAS,CAACf,EAAE;YACvBY,MAAM;YACNM,aAAa;YACbC,WAAW;YACXC,YAAYT,OAAOS,UAAU;YAC7BC,YAAYV,OAAOU,UAAU;QAC/B;IACF;AAEF"}