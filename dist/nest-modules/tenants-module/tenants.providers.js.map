{"version":3,"sources":["../../../src/nest-modules/tenants-module/tenants.providers.ts"],"sourcesContent":["import { CreateTenantUseCase } from '@core/tenant/application/use-case/create-tenant/create-tenant.use-case';\nimport { TenantInMemoryRepository } from './../../core/tenant/infra/db/in-memory/tenant-in-memory.repository';\nimport { TenantSequelizeRepository } from '@core/tenant/infra/db/sequelize/tenant-sequelize.repository';\nimport { TenantModel } from '@core/tenant/infra/db/sequelize/tenant.model';\nimport { getModelToken } from '@nestjs/sequelize';\nimport { ITenantRepository } from '@core/tenant/domain/tenant.repository';\nimport { UpdateTenantUseCase } from '@core/tenant/application/use-case/update-tenant/update-tenant.use-case';\nimport { ListTenantsUseCase } from '@core/tenant/application/use-case/list-tenants/list-tenants.use-case';\nimport { GetTenantUseCase } from '@core/tenant/application/use-case/get-tenant/get-tenant.use-case';\nimport { DeleteTenantUseCase } from '@core/tenant/application/use-case/delete-tenant/delete-tenant.use-case';\n\nexport const REPOSITORIES = {\n  TENANT_REPOSITORY: {\n    provide: 'TenantRepository',\n    useExisting: TenantSequelizeRepository,\n  },\n  TENANT_IN_MEMORY_REPOSITORY: {\n    provide: TenantInMemoryRepository,\n    useClass: TenantInMemoryRepository,\n  },\n  TENANT_SEQUELIZE_REPOSITORY: {\n    provide: TenantSequelizeRepository,\n    useFactory: (tenantModel: typeof TenantModel) => {\n      return new TenantSequelizeRepository(tenantModel);\n    },\n    inject: [getModelToken(TenantModel)],\n  },\n};\n\nexport const USE_CASES = {\n  CREATE_TENANT_USE_CASE: {\n    provide: CreateTenantUseCase,\n    useFactory: (tenantRepo: ITenantRepository) => {\n      return new CreateTenantUseCase(tenantRepo);\n    },\n    inject: [REPOSITORIES.TENANT_REPOSITORY.provide],\n  },\n  UPDATE_CATEGORY_USE_CASE: {\n    provide: UpdateTenantUseCase,\n    useFactory: (tenantRepo: ITenantRepository) => {\n      return new UpdateTenantUseCase(tenantRepo);\n    },\n    inject: [REPOSITORIES.TENANT_REPOSITORY.provide],\n  },\n  LIST_TENANTS_USE_CASE: {\n    provide: ListTenantsUseCase,\n    useFactory: (tenantsRepo: ITenantRepository) => {\n      return new ListTenantsUseCase(tenantsRepo);\n    },\n    inject: [REPOSITORIES.TENANT_REPOSITORY.provide],\n  },\n  GET_TENANT_USE_CASE: {\n    provide: GetTenantUseCase,\n    useFactory: (tenantRepo: ITenantRepository) => {\n      return new GetTenantUseCase(tenantRepo);\n    },\n    inject: [REPOSITORIES.TENANT_REPOSITORY.provide],\n  },\n  DELETE_TENANT_USE_CASE: {\n    provide: DeleteTenantUseCase,\n    useFactory: (tenantRepo: ITenantRepository) => {\n      return new DeleteTenantUseCase(tenantRepo);\n    },\n    inject: [REPOSITORIES.TENANT_REPOSITORY.provide],\n  },\n};\n\n// export const VALIDATIONS = {\n//   TENANTS_IDS_EXISTS_IN_DATABASE_VALIDATOR: {\n//     provide: TenantsIdExistsInDatabaseValidator,\n//     useFactory: (categoryRepo: ICategoryRepository) => {\n//       return new CategoriesIdExistsInDatabaseValidator(categoryRepo);\n//     },\n//     inject: [REPOSITORIES.CATEGORY_REPOSITORY.provide],\n//   },\n// };\n\nexport const TENANT_PROVIDERS = {\n  REPOSITORIES,\n  USE_CASES,\n  //VALIDATIONS,\n};\n"],"names":["REPOSITORIES","TENANT_PROVIDERS","USE_CASES","TENANT_REPOSITORY","provide","useExisting","TenantSequelizeRepository","TENANT_IN_MEMORY_REPOSITORY","TenantInMemoryRepository","useClass","TENANT_SEQUELIZE_REPOSITORY","useFactory","tenantModel","inject","getModelToken","TenantModel","CREATE_TENANT_USE_CASE","CreateTenantUseCase","tenantRepo","UPDATE_CATEGORY_USE_CASE","UpdateTenantUseCase","LIST_TENANTS_USE_CASE","ListTenantsUseCase","tenantsRepo","GET_TENANT_USE_CASE","GetTenantUseCase","DELETE_TENANT_USE_CASE","DeleteTenantUseCase"],"mappings":";;;;;;;;;;;IAWaA,YAAY;eAAZA;;IAkEAC,gBAAgB;eAAhBA;;IAhDAC,SAAS;eAATA;;;qCA7BuB;0CACK;2CACC;6BACd;2BACE;qCAEM;oCACD;kCACF;qCACG;AAE7B,MAAMF,eAAe;IAC1BG,mBAAmB;QACjBC,SAAS;QACTC,aAAaC,oDAAyB;IACxC;IACAC,6BAA6B;QAC3BH,SAASI,kDAAwB;QACjCC,UAAUD,kDAAwB;IACpC;IACAE,6BAA6B;QAC3BN,SAASE,oDAAyB;QAClCK,YAAY,CAACC;YACX,OAAO,IAAIN,oDAAyB,CAACM;QACvC;QACAC,QAAQ;YAACC,IAAAA,wBAAa,EAACC,wBAAW;SAAE;IACtC;AACF;AAEO,MAAMb,YAAY;IACvBc,wBAAwB;QACtBZ,SAASa,wCAAmB;QAC5BN,YAAY,CAACO;YACX,OAAO,IAAID,wCAAmB,CAACC;QACjC;QACAL,QAAQ;YAACb,aAAaG,iBAAiB,CAACC,OAAO;SAAC;IAClD;IACAe,0BAA0B;QACxBf,SAASgB,wCAAmB;QAC5BT,YAAY,CAACO;YACX,OAAO,IAAIE,wCAAmB,CAACF;QACjC;QACAL,QAAQ;YAACb,aAAaG,iBAAiB,CAACC,OAAO;SAAC;IAClD;IACAiB,uBAAuB;QACrBjB,SAASkB,sCAAkB;QAC3BX,YAAY,CAACY;YACX,OAAO,IAAID,sCAAkB,CAACC;QAChC;QACAV,QAAQ;YAACb,aAAaG,iBAAiB,CAACC,OAAO;SAAC;IAClD;IACAoB,qBAAqB;QACnBpB,SAASqB,kCAAgB;QACzBd,YAAY,CAACO;YACX,OAAO,IAAIO,kCAAgB,CAACP;QAC9B;QACAL,QAAQ;YAACb,aAAaG,iBAAiB,CAACC,OAAO;SAAC;IAClD;IACAsB,wBAAwB;QACtBtB,SAASuB,wCAAmB;QAC5BhB,YAAY,CAACO;YACX,OAAO,IAAIS,wCAAmB,CAACT;QACjC;QACAL,QAAQ;YAACb,aAAaG,iBAAiB,CAACC,OAAO;SAAC;IAClD;AACF;AAYO,MAAMH,mBAAmB;IAC9BD;IACAE;AAEF"}