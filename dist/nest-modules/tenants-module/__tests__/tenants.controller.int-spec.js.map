{"version":3,"sources":["../../../../src/nest-modules/tenants-module/__tests__/tenants.controller.int-spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '../../config-module/config.module';\nimport { DatabaseModule } from '../../database-module/database.module';\nimport { TenantsController } from '../tenants.controller';\nimport { ITenantRepository } from '@core/tenant/domain/tenant.repository';\nimport { TenantsModule } from '../tenants.module';\nimport { TENANT_PROVIDERS } from '../tenants.providers';\nimport { CreateTenantUseCase } from '@core/tenant/application/use-case/create-tenant/create-tenant.use-case';\nimport { UpdateTenantUseCase } from '@core/tenant/application/use-case/update-tenant/update-tenant.use-case';\nimport { ListTenantsUseCase } from '@core/tenant/application/use-case/list-tenants/list-tenants.use-case';\nimport { GetTenantUseCase } from '@core/tenant/application/use-case/get-tenant/get-tenant.use-case';\nimport { DeleteTenantUseCase } from '@core/tenant/application/use-case/delete-tenant/delete-tenant.use-case';\nimport {\n  CreateTenantFixture,\n  ListTenantsFixture,\n  UpdateTenantFixture,\n} from '../testing/tenant-fixture';\nimport { Uuid } from '@core/shared/domain/value-objects/uuid.vo';\nimport { TenantOutputMapper } from '@core/tenant/application/use-case/common/tenant-output';\nimport {\n  TenantCollectionPresenter,\n  TenantPresenter,\n} from '../tenants.presenter';\nimport { Tenant } from '@core/tenant/domain/tenant.entity';\n\ndescribe('TenantsController Integration Tests', () => {\n  let controller: TenantsController;\n  let repository: ITenantRepository;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [ConfigModule.forRoot(), DatabaseModule, TenantsModule],\n    }).compile();\n    controller = module.get<TenantsController>(TenantsController);\n    repository = module.get<ITenantRepository>(\n      TENANT_PROVIDERS.REPOSITORIES.TENANT_REPOSITORY.provide,\n    );\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n    expect(controller['createUseCase']).toBeInstanceOf(CreateTenantUseCase);\n    expect(controller['updateUseCase']).toBeInstanceOf(UpdateTenantUseCase);\n    expect(controller['listUseCase']).toBeInstanceOf(ListTenantsUseCase);\n    expect(controller['getUseCase']).toBeInstanceOf(GetTenantUseCase);\n    expect(controller['deleteUseCase']).toBeInstanceOf(DeleteTenantUseCase);\n  });\n\n  describe('should create a tenant', () => {\n    const arrange = CreateTenantFixture.arrangeForCreate();\n    test.each(arrange)(\n      'when body is $send_data',\n      async ({ send_data, expected }) => {\n        const presenter = await controller.create(send_data);\n        const entity = await repository.findById(new Uuid(presenter.id));\n        expect(entity!.toJSON()).toStrictEqual({\n          tenant_id: presenter.id,\n          created_at: presenter.created_at,\n          updated_at: presenter.updated_at,\n          ...expected,\n        });\n        const output = TenantOutputMapper.toOutput(entity!);\n        expect(presenter).toEqual(new TenantPresenter(output));\n      },\n    );\n  });\n\n  describe('should update a tenant', () => {\n    const arrange = UpdateTenantFixture.arrangeForUpdate();\n\n    const tenant = Tenant.fake().aTenant().build();\n\n    beforeEach(async () => {\n      await repository.insert(tenant);\n    });\n\n    test.each(arrange)(\n      'when body is $send_data',\n      async ({ send_data, expected }) => {\n        const presenter = await controller.update(\n          tenant.tenant_id.id,\n          send_data,\n        );\n        const entity = await repository.findById(new Uuid(presenter.id));\n        expect(entity!.toJSON()).toStrictEqual({\n          tenant_id: presenter.id,\n          created_at: presenter.created_at,\n          updated_at: presenter.updated_at,\n          name: expected.name ?? tenant.name,\n          description:\n            'description' in expected\n              ? expected.description\n              : tenant.description,\n          is_active:\n            expected.is_active === true || expected.is_active === false\n              ? expected.is_active\n              : tenant.is_active,\n        });\n        const output = TenantOutputMapper.toOutput(entity!);\n        expect(presenter).toEqual(new TenantPresenter(output));\n      },\n    );\n  });\n\n  it('should delete a tenant', async () => {\n    const tenant = Tenant.fake().aTenant().build();\n    await repository.insert(tenant);\n    const response = await controller.remove(tenant.tenant_id.id);\n    expect(response).not.toBeDefined();\n    await expect(repository.findById(tenant.tenant_id)).resolves.toBeNull();\n  });\n\n  it('should get a tenant', async () => {\n    const tenant = Tenant.fake().aTenant().build();\n    await repository.insert(tenant);\n    const presenter = await controller.findOne(tenant.tenant_id.id);\n\n    expect(presenter.id).toBe(tenant.tenant_id.id);\n    expect(presenter.name).toBe(tenant.name);\n    expect(presenter.description).toBe(tenant.description);\n    expect(presenter.is_active).toBe(tenant.is_active);\n    expect(presenter.created_at).toStrictEqual(tenant.created_at);\n    expect(presenter.updated_at).toStrictEqual(tenant.updated_at);\n  });\n\n  describe('search method', () => {\n    describe('should sorted tenants by created_at', () => {\n      const { entitiesMap, arrange } =\n        ListTenantsFixture.arrangeIncrementedWithCreatedAt();\n\n      beforeEach(async () => {\n        await repository.bulkInsert(Object.values(entitiesMap));\n      });\n\n      test.each(arrange)(\n        'when send_data is $send_data',\n        async ({ send_data, expected }) => {\n          const presenter = await controller.search(send_data);\n          const { entities, ...paginationProps } = expected;\n          expect(presenter).toEqual(\n            new TenantCollectionPresenter({\n              items: entities.map(TenantOutputMapper.toOutput),\n              ...paginationProps.meta,\n            }),\n          );\n        },\n      );\n    });\n\n    describe('should return tenants using pagination, sort and filter', () => {\n      const { entitiesMap, arrange } = ListTenantsFixture.arrangeUnsorted();\n\n      beforeEach(async () => {\n        await repository.bulkInsert(Object.values(entitiesMap));\n      });\n\n      test.each(arrange)(\n        'when send_data is $send_data',\n        async ({ send_data, expected }) => {\n          const presenter = await controller.search(send_data);\n          const { entities, ...paginationProps } = expected;\n          expect(presenter).toEqual(\n            new TenantCollectionPresenter({\n              items: entities.map(TenantOutputMapper.toOutput),\n              ...paginationProps.meta,\n            }),\n          );\n        },\n      );\n    });\n  });\n});\n"],"names":["describe","controller","repository","beforeEach","module","Test","createTestingModule","imports","ConfigModule","forRoot","DatabaseModule","TenantsModule","compile","get","TenantsController","TENANT_PROVIDERS","REPOSITORIES","TENANT_REPOSITORY","provide","it","expect","toBeDefined","toBeInstanceOf","CreateTenantUseCase","UpdateTenantUseCase","ListTenantsUseCase","GetTenantUseCase","DeleteTenantUseCase","arrange","CreateTenantFixture","arrangeForCreate","test","each","send_data","expected","presenter","create","entity","findById","Uuid","id","toJSON","toStrictEqual","tenant_id","created_at","updated_at","output","TenantOutputMapper","toOutput","toEqual","TenantPresenter","UpdateTenantFixture","arrangeForUpdate","tenant","Tenant","fake","aTenant","build","insert","update","name","description","is_active","response","remove","not","resolves","toBeNull","findOne","toBe","entitiesMap","ListTenantsFixture","arrangeIncrementedWithCreatedAt","bulkInsert","Object","values","search","entities","paginationProps","TenantCollectionPresenter","items","map","meta","arrangeUnsorted"],"mappings":"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"}