{"version":3,"sources":["../../../../src/nest-modules/tenants-module/__tests__/tenants.controller.spec.ts"],"sourcesContent":["import { TenantsController } from '../tenants.controller';\nimport { SortDirection } from '@core/shared/domain/repository/search-params';\nimport { CreateTenantOutput } from '@core/tenant/application/use-case/create-tenant/create-tenant.use-case';\nimport { CreateTenantDto } from '../dto/create-tenant.dto';\nimport {\n  TenantPresenter,\n  TenantCollectionPresenter,\n} from '../tenants.presenter';\nimport { UpdateTenantOutput } from '@core/tenant/application/use-case/update-tenant/update-tenant.use-case';\nimport { UpdateTenantInput } from '@core/tenant/application/use-case/update-tenant/update-tenant.input';\nimport { GetTenantOutput } from '@core/tenant/application/use-case/get-tenant/get-tenant.use-case';\nimport { ListTenantsOutput } from '@core/tenant/application/use-case/list-tenants/list-tenants.use-case';\n\ndescribe('TenantsController Unit tests', () => {\n  let controller: TenantsController;\n\n  beforeEach(async () => {\n    controller = new TenantsController();\n  });\n\n  it('should creates a tenant', async () => {\n    //Arrange\n    const output: CreateTenantOutput = {\n      id: '9366b7dc-2d71-4799-b91c-c64adb205104',\n      name: 'Movie',\n      description: 'some description',\n      is_active: true,\n      created_at: new Date(),\n      updated_at: new Date(),\n    };\n    const mockCreateUseCase = {\n      execute: jest.fn().mockReturnValue(Promise.resolve(output)),\n    };\n    //@ts-expect-error defined part of methods\n    controller['createUseCase'] = mockCreateUseCase;\n    const input: CreateTenantDto = {\n      name: 'Movie',\n      description: 'some description',\n      is_active: true,\n    };\n\n    //Act\n    const presenter = await controller.create(input);\n\n    //Assert\n    expect(mockCreateUseCase.execute).toHaveBeenCalledWith(input);\n    expect(presenter).toBeInstanceOf(TenantPresenter);\n    expect(presenter).toStrictEqual(new TenantPresenter(output));\n  });\n\n  it('should updates a tenant', async () => {\n    const id = '9366b7dc-2d71-4799-b91c-c64adb205104';\n    const output: UpdateTenantOutput = {\n      id,\n      name: 'Movie',\n      description: 'some description',\n      is_active: true,\n      created_at: new Date(),\n      updated_at: new Date(),\n    };\n    const mockUpdateUseCase = {\n      execute: jest.fn().mockReturnValue(Promise.resolve(output)),\n    };\n    //@ts-expect-error defined part of methods\n    controller['updateUseCase'] = mockUpdateUseCase;\n    const input: Omit<UpdateTenantInput, 'id'> = {\n      name: 'Movie',\n      description: 'some description',\n      is_active: true,\n    };\n    const presenter = await controller.update(id, input);\n    expect(mockUpdateUseCase.execute).toHaveBeenCalledWith({ id, ...input });\n    expect(presenter).toBeInstanceOf(TenantPresenter);\n    expect(presenter).toStrictEqual(new TenantPresenter(output));\n  });\n\n  it('should deletes a tenant', async () => {\n    const expectedOutput = undefined;\n    const mockDeleteUseCase = {\n      execute: jest.fn().mockReturnValue(Promise.resolve(expectedOutput)),\n    };\n    //@ts-expect-error defined part of methods\n    controller['deleteUseCase'] = mockDeleteUseCase;\n    const id = '9366b7dc-2d71-4799-b91c-c64adb205104';\n    expect(controller.remove(id)).toBeInstanceOf(Promise);\n    const output = await controller.remove(id);\n    expect(mockDeleteUseCase.execute).toHaveBeenCalledWith({ id });\n    expect(expectedOutput).toStrictEqual(output);\n  });\n\n  it('should gets a tenant', async () => {\n    const id = '9366b7dc-2d71-4799-b91c-c64adb205104';\n    const output: GetTenantOutput = {\n      id,\n      name: 'Movie',\n      description: 'some description',\n      is_active: true,\n      created_at: new Date(),\n      updated_at: new Date(),\n    };\n    const mockGetUseCase = {\n      execute: jest.fn().mockReturnValue(Promise.resolve(output)),\n    };\n    //@ts-expect-error defined part of methods\n    controller['getUseCase'] = mockGetUseCase;\n    const presenter = await controller.findOne(id);\n    expect(mockGetUseCase.execute).toHaveBeenCalledWith({ id });\n    expect(presenter).toBeInstanceOf(TenantPresenter);\n    expect(presenter).toStrictEqual(new TenantPresenter(output));\n  });\n\n  it('should list tenants', async () => {\n    const output: ListTenantsOutput = {\n      items: [\n        {\n          id: '9366b7dc-2d71-4799-b91c-c64adb205104',\n          name: 'Movie',\n          description: 'some description',\n          is_active: true,\n          created_at: new Date(),\n          updated_at: new Date(),\n        },\n      ],\n      current_page: 1,\n      last_page: 1,\n      per_page: 1,\n      total: 1,\n    };\n    const mockListUseCase = {\n      execute: jest.fn().mockReturnValue(Promise.resolve(output)),\n    };\n    //@ts-expect-error defined part of methods\n    controller['listUseCase'] = mockListUseCase;\n    const searchParams = {\n      page: 1,\n      per_page: 2,\n      sort: 'name',\n      sort_dir: 'desc' as SortDirection,\n      filter: 'test',\n    };\n    const presenter = await controller.search(searchParams);\n    expect(presenter).toBeInstanceOf(TenantCollectionPresenter);\n    expect(mockListUseCase.execute).toHaveBeenCalledWith(searchParams);\n    expect(presenter).toEqual(new TenantCollectionPresenter(output));\n  });\n});\n"],"names":["describe","controller","beforeEach","TenantsController","it","output","id","name","description","is_active","created_at","Date","updated_at","mockCreateUseCase","execute","jest","fn","mockReturnValue","Promise","resolve","input","presenter","create","expect","toHaveBeenCalledWith","toBeInstanceOf","TenantPresenter","toStrictEqual","mockUpdateUseCase","update","expectedOutput","undefined","mockDeleteUseCase","remove","mockGetUseCase","findOne","items","current_page","last_page","per_page","total","mockListUseCase","searchParams","page","sort","sort_dir","filter","search","TenantCollectionPresenter","toEqual"],"mappings":"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"}