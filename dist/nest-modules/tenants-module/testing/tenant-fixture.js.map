{"version":3,"sources":["../../../../src/nest-modules/tenants-module/testing/tenant-fixture.ts"],"sourcesContent":["import { Tenant } from '@core/tenant/domain/tenant.entity';\n\nconst _keysInResponse = [\n  'id',\n  'name',\n  'description',\n  'is_active',\n  'created_at',\n  'updated_at',\n];\n\nexport class GetTenantFixture {\n  static keysInResponse = _keysInResponse;\n}\n\nexport class CreateTenantFixture {\n  static keysInResponse = _keysInResponse;\n\n  static arrangeForCreate() {\n    const faker = Tenant.fake()\n      .aTenant()\n      .withName('Movie')\n      .withDescription('description test');\n    return [\n      {\n        send_data: {\n          name: faker.name,\n        },\n        expected: {\n          name: faker.name,\n          description: null,\n          is_active: true,\n        },\n      },\n      {\n        send_data: {\n          name: faker.name,\n          description: faker.description,\n        },\n        expected: {\n          name: faker.name,\n          description: faker.description,\n          is_active: true,\n        },\n      },\n      {\n        send_data: {\n          name: faker.name,\n          is_active: true,\n        },\n        expected: {\n          name: faker.name,\n          description: null,\n          is_active: true,\n        },\n      },\n      {\n        send_data: {\n          name: faker.name,\n          is_active: false,\n        },\n        expected: {\n          name: faker.name,\n          description: null,\n          is_active: false,\n        },\n      },\n      {\n        send_data: {\n          name: faker.name,\n          description: faker.description,\n          is_active: true,\n        },\n        expected: {\n          name: faker.name,\n          description: faker.description,\n          is_active: true,\n        },\n      },\n    ];\n  }\n\n  static arrangeInvalidRequest() {\n    const defaultExpected = {\n      statusCode: 422,\n      error: 'Unprocessable Entity',\n    };\n\n    return {\n      EMPTY: {\n        send_data: {},\n        expected: {\n          message: ['name should not be empty', 'name must be a string'],\n          ...defaultExpected,\n        },\n      },\n      NAME_UNDEFINED: {\n        send_data: {\n          name: undefined,\n        },\n        expected: {\n          message: ['name should not be empty', 'name must be a string'],\n          ...defaultExpected,\n        },\n      },\n      NAME_NULL: {\n        send_data: {\n          name: null,\n        },\n        expected: {\n          message: ['name should not be empty', 'name must be a string'],\n          ...defaultExpected,\n        },\n      },\n      NAME_EMPTY: {\n        send_data: {\n          name: '',\n        },\n        expected: {\n          message: ['name should not be empty'],\n          ...defaultExpected,\n        },\n      },\n      DESCRIPTION_NOT_A_STRING: {\n        send_data: {\n          description: 5,\n        },\n        expected: {\n          message: [\n            'name should not be empty',\n            'name must be a string',\n            'description must be a string',\n          ],\n          ...defaultExpected,\n        },\n      },\n      IS_ACTIVE_NOT_A_BOOLEAN: {\n        send_data: {\n          is_active: 'a',\n        },\n        expected: {\n          message: [\n            'name should not be empty',\n            'name must be a string',\n            'is_active must be a boolean value',\n          ],\n          ...defaultExpected,\n        },\n      },\n    };\n  }\n\n  static arrangeForEntityValidationError() {\n    const faker = Tenant.fake().aTenant();\n    const defaultExpected = {\n      statusCode: 422,\n      error: 'Unprocessable Entity',\n    };\n\n    return {\n      NAME_TOO_LONG: {\n        send_data: {\n          name: faker.withInvalidNameTooLong().name,\n        },\n        expected: {\n          message: ['name must be shorter than or equal to 255 characters'],\n          ...defaultExpected,\n        },\n      },\n    };\n  }\n}\n\nexport class UpdateTenantFixture {\n  static keysInResponse = _keysInResponse;\n\n  static arrangeForUpdate() {\n    const faker = Tenant.fake()\n      .aTenant()\n      .withName('Movie')\n      .withDescription('description test');\n    return [\n      {\n        send_data: {\n          name: faker.name,\n          description: null,\n          is_active: true,\n        },\n        expected: {\n          name: faker.name,\n          description: null,\n          is_active: true,\n        },\n      },\n      {\n        send_data: {\n          name: faker.name,\n          description: faker.description,\n        },\n        expected: {\n          name: faker.name,\n          description: faker.description,\n          is_active: true,\n        },\n      },\n      {\n        send_data: {\n          name: faker.name,\n          is_active: false,\n        },\n        expected: {\n          name: faker.name,\n          is_active: false,\n        },\n      },\n    ];\n  }\n\n  static arrangeInvalidRequest() {\n    const defaultExpected = {\n      statusCode: 422,\n      error: 'Unprocessable Entity',\n    };\n\n    return {\n      DESCRIPTION_NOT_A_STRING: {\n        send_data: {\n          description: 5,\n        },\n        expected: {\n          message: ['description must be a string'],\n          ...defaultExpected,\n        },\n      },\n      IS_ACTIVE_NOT_A_BOOLEAN: {\n        send_data: {\n          is_active: 'a',\n        },\n        expected: {\n          message: ['is_active must be a boolean value'],\n          ...defaultExpected,\n        },\n      },\n    };\n  }\n\n  static arrangeForEntityValidationError() {\n    const faker = Tenant.fake().aTenant();\n    const defaultExpected = {\n      statusCode: 422,\n      error: 'Unprocessable Entity',\n    };\n\n    return {\n      NAME_TOO_LONG: {\n        send_data: {\n          name: faker.withInvalidNameTooLong().name,\n        },\n        expected: {\n          message: ['name must be shorter than or equal to 255 characters'],\n          ...defaultExpected,\n        },\n      },\n    };\n  }\n}\n\nexport class ListTenantsFixture {\n  static arrangeIncrementedWithCreatedAt() {\n    const _entities = Tenant.fake()\n      .theTenants(4)\n      .withName((i) => i + '')\n      .withCreatedAt((i) => new Date(new Date().getTime() + i * 2000))\n      .withUpdatedAt((i) => new Date(new Date().getTime() + i * 2000))\n      .build();\n\n    const entitiesMap = {\n      first: _entities[0],\n      second: _entities[1],\n      third: _entities[2],\n      fourth: _entities[3],\n    };\n\n    const arrange = [\n      {\n        send_data: {},\n        expected: {\n          entities: [\n            entitiesMap.fourth,\n            entitiesMap.third,\n            entitiesMap.second,\n            entitiesMap.first,\n          ],\n          meta: {\n            current_page: 1,\n            last_page: 1,\n            per_page: 15,\n            total: 4,\n          },\n        },\n      },\n      {\n        send_data: {\n          page: 1,\n          per_page: 2,\n        },\n        expected: {\n          entities: [entitiesMap.fourth, entitiesMap.third],\n          meta: {\n            current_page: 1,\n            last_page: 2,\n            per_page: 2,\n            total: 4,\n          },\n        },\n      },\n      {\n        send_data: {\n          page: 2,\n          per_page: 2,\n        },\n        expected: {\n          entities: [entitiesMap.second, entitiesMap.first],\n          meta: {\n            current_page: 2,\n            last_page: 2,\n            per_page: 2,\n            total: 4,\n          },\n        },\n      },\n    ];\n\n    return { arrange, entitiesMap };\n  }\n\n  static arrangeUnsorted() {\n    const faker = Tenant.fake().aTenant();\n\n    const entitiesMap = {\n      a: faker.withName('a').build(),\n      AAA: faker.withName('AAA').build(),\n      AaA: faker.withName('AaA').build(),\n      b: faker.withName('b').build(),\n      c: faker.withName('c').build(),\n    };\n\n    const arrange = [\n      {\n        send_data: {\n          page: 1,\n          per_page: 2,\n          sort: 'name',\n          filter: 'a',\n        },\n        expected: {\n          entities: [entitiesMap.AAA, entitiesMap.AaA],\n          meta: {\n            total: 3,\n            current_page: 1,\n            last_page: 2,\n            per_page: 2,\n          },\n        },\n      },\n      {\n        send_data: {\n          page: 2,\n          per_page: 2,\n          sort: 'name',\n          filter: 'a',\n        },\n        expected: {\n          entities: [entitiesMap.a],\n          meta: {\n            total: 3,\n            current_page: 2,\n            last_page: 2,\n            per_page: 2,\n          },\n        },\n      },\n    ];\n\n    return { arrange, entitiesMap };\n  }\n}\n"],"names":["CreateTenantFixture","GetTenantFixture","ListTenantsFixture","UpdateTenantFixture","_keysInResponse","keysInResponse","arrangeForCreate","faker","Tenant","fake","aTenant","withName","withDescription","send_data","name","expected","description","is_active","arrangeInvalidRequest","defaultExpected","statusCode","error","EMPTY","message","NAME_UNDEFINED","undefined","NAME_NULL","NAME_EMPTY","DESCRIPTION_NOT_A_STRING","IS_ACTIVE_NOT_A_BOOLEAN","arrangeForEntityValidationError","NAME_TOO_LONG","withInvalidNameTooLong","arrangeForUpdate","arrangeIncrementedWithCreatedAt","_entities","theTenants","i","withCreatedAt","Date","getTime","withUpdatedAt","build","entitiesMap","first","second","third","fourth","arrange","entities","meta","current_page","last_page","per_page","total","page","arrangeUnsorted","a","AAA","AaA","b","c","sort","filter"],"mappings":"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"}