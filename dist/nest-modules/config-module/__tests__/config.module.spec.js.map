{"version":3,"sources":["../../../../src/nest-modules/config-module/__tests__/config.module.spec.ts"],"sourcesContent":["import { Test } from '@nestjs/testing';\nimport { CONFIG_DB_SCHEMA, ConfigModule } from '../config.module';\nimport Joi from 'joi';\nimport { join } from 'path';\n\nfunction expectValidate(schema: Joi.Schema, value: any) {\n  return expect(schema.validate(value, { abortEarly: false }).error.message);\n}\n\ndescribe('Schema Unit Tests', () => {\n  describe('DB Schema', () => {\n    const schema = Joi.object({\n      ...CONFIG_DB_SCHEMA,\n    });\n    describe('DB_VENDOR', () => {\n      test('invalid cases', () => {\n        expectValidate(schema, {}).toContain('\"DB_VENDOR\" is required');\n        expectValidate(schema, { DB_VENDOR: 'invalid' }).toContain(\n          '\"DB_VENDOR\" must be one of [mysql, sqlite]',\n        );\n      });\n      test('valid cases', () => {\n        const arrange = ['mysql', 'sqlite'];\n        arrange.forEach((value) => {\n          expectValidate(schema, { DB_VENDOR: value }).not.toContain(\n            'DB_VENDOR',\n          );\n        });\n      });\n    });\n    describe('DB_HOST', () => {\n      test('invalid cases', () => {\n        expectValidate(schema, {}).toContain('\"DB_HOST\" is required');\n        expectValidate(schema, { DB_HOST: 1 }).toContain(\n          '\"DB_HOST\" must be a string',\n        );\n      });\n      test('valid cases', () => {\n        const arrange = ['some value'];\n\n        arrange.forEach((value) => {\n          expectValidate(schema, { DB_HOST: value }).not.toContain('DB_HOST');\n        });\n      });\n    });\n    describe('DB_DATABASE', () => {\n      test('invalid cases', () => {\n        expectValidate(schema, { DB_VENDOR: 'sqlite' }).not.toContain(\n          '\"DB_DATABASE\" is required',\n        );\n\n        expectValidate(schema, { DB_VENDOR: 'mysql' }).toContain(\n          '\"DB_DATABASE\" is required',\n        );\n\n        expectValidate(schema, { DB_DATABASE: 1 }).toContain(\n          '\"DB_DATABASE\" must be a string',\n        );\n      });\n      test('valid cases', () => {\n        expectValidate(schema, { DB_DATABASE: 'root' }).not.toContain(\n          'DB_DATABASE',\n        );\n      });\n      test('valid cases', () => {\n        const arrange = [\n          { DB_VENDOR: 'sqlite' },\n          { DB_VENDOR: 'sqlite', DB_DATABASE: 'some value' },\n          { DB_VENDOR: 'mysql', DB_DATABASE: 'some value' },\n        ];\n\n        arrange.forEach((value) => {\n          expectValidate(schema, value).not.toContain('DB_DATABASE');\n        });\n      });\n    });\n    describe('DB_USERNAME', () => {\n      test('invalid cases', () => {\n        expectValidate(schema, { DB_VENDOR: 'sqlite' }).not.toContain(\n          '\"DB_USERNAME\" is required',\n        );\n\n        expectValidate(schema, { DB_VENDOR: 'mysql' }).toContain(\n          '\"DB_USERNAME\" is required',\n        );\n\n        expectValidate(schema, { DB_USERNAME: 1 }).toContain(\n          '\"DB_USERNAME\" must be a string',\n        );\n      });\n\n      test('valid cases', () => {\n        const arrange = [\n          { DB_VENDOR: 'sqlite' },\n          { DB_VENDOR: 'sqlite', DB_USERNAME: 'some value' },\n          { DB_VENDOR: 'mysql', DB_USERNAME: 'some value' },\n        ];\n\n        arrange.forEach((value) => {\n          expectValidate(schema, value).not.toContain('DB_USERNAME');\n        });\n      });\n    });\n    describe('DB_PASSWORD', () => {\n      test('invalid cases', () => {\n        expectValidate(schema, { DB_VENDOR: 'sqlite' }).not.toContain(\n          '\"DB_PASSWORD\" is required',\n        );\n\n        expectValidate(schema, { DB_VENDOR: 'mysql' }).toContain(\n          '\"DB_PASSWORD\" is required',\n        );\n\n        expectValidate(schema, { DB_PASSWORD: 1 }).toContain(\n          '\"DB_PASSWORD\" must be a string',\n        );\n      });\n\n      test('valid cases', () => {\n        const arrange = [\n          { DB_VENDOR: 'sqlite' },\n          { DB_VENDOR: 'sqlite', DB_PASSWORD: 'some value' },\n          { DB_VENDOR: 'mysql', DB_PASSWORD: 'some value' },\n        ];\n\n        arrange.forEach((value) => {\n          expectValidate(schema, value).not.toContain('DB_PASSWORD');\n        });\n      });\n    });\n    describe('DB_PORT', () => {\n      test('invalid cases', () => {\n        expectValidate(schema, { DB_VENDOR: 'sqlite' }).not.toContain(\n          '\"DB_PORT\" is required',\n        );\n\n        expectValidate(schema, { DB_VENDOR: 'mysql' }).toContain(\n          '\"DB_PORT\" is required',\n        );\n\n        expectValidate(schema, { DB_PORT: 'a' }).toContain(\n          '\"DB_PORT\" must be a number',\n        );\n\n        expectValidate(schema, { DB_PORT: '1.2' }).toContain(\n          '\"DB_PORT\" must be an integer',\n        );\n      });\n\n      test('valid cases', () => {\n        const arrange = [\n          { DB_VENDOR: 'sqlite' },\n          { DB_VENDOR: 'sqlite', DB_PORT: 10 },\n          { DB_VENDOR: 'sqlite', DB_PORT: '10' },\n          { DB_VENDOR: 'mysql', DB_PORT: 10 },\n          { DB_VENDOR: 'mysql', DB_PORT: '10' },\n        ];\n\n        arrange.forEach((value) => {\n          expectValidate(schema, value).not.toContain('DB_PORT');\n        });\n      });\n    });\n    describe('DB_LOGGING', () => {\n      test('invalid cases', () => {\n        expectValidate(schema, {}).toContain('\"DB_LOGGING\" is required');\n\n        expectValidate(schema, { DB_LOGGING: 'a' }).toContain(\n          '\"DB_LOGGING\" must be a boolean',\n        );\n      });\n\n      test('valid cases', () => {\n        const arrange = [true, false, 'true', 'false'];\n\n        arrange.forEach((value) => {\n          expectValidate(schema, { DB_LOGGING: value }).not.toContain(\n            'DB_LOGGING',\n          );\n        });\n      });\n    });\n    describe('DB_AUTO_LOAD_MODELS', () => {\n      test('invalid cases', () => {\n        expectValidate(schema, {}).toContain(\n          '\"DB_AUTO_LOAD_MODELS\" is required',\n        );\n\n        expectValidate(schema, { DB_AUTO_LOAD_MODELS: 'a' }).toContain(\n          '\"DB_AUTO_LOAD_MODELS\" must be a boolean',\n        );\n      });\n\n      test('valid cases', () => {\n        const arrange = [true, false, 'true', 'false'];\n\n        arrange.forEach((value) => {\n          expectValidate(schema, { DB_AUTO_LOAD_MODELS: value }).not.toContain(\n            'DB_AUTO_LOAD_MODELS',\n          );\n        });\n      });\n    });\n  });\n});\n\ndescribe('ConfigModule Unit Tests', () => {\n  it('should throw an error when env vars are invalid', () => {\n    try {\n      Test.createTestingModule({\n        imports: [\n          ConfigModule.forRoot({\n            envFilePath: join(__dirname, '.env.fake'),\n          }),\n        ],\n      });\n      fail('ConfigModule should throw an error when env vars are invalid');\n    } catch (e) {\n      expect(e.message).toContain('\"DB_VENDOR\" must be one of [mysql, sqlite]');\n    }\n  });\n\n  it('should be valid', () => {\n    const module = Test.createTestingModule({\n      imports: [ConfigModule.forRoot()],\n    });\n\n    expect(module).toBeDefined();\n  });\n});\n"],"names":["expectValidate","schema","value","expect","validate","abortEarly","error","message","describe","Joi","object","CONFIG_DB_SCHEMA","test","toContain","DB_VENDOR","arrange","forEach","not","DB_HOST","DB_DATABASE","DB_USERNAME","DB_PASSWORD","DB_PORT","DB_LOGGING","DB_AUTO_LOAD_MODELS","it","Test","createTestingModule","imports","ConfigModule","forRoot","envFilePath","join","__dirname","fail","e","module","toBeDefined"],"mappings":"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"}